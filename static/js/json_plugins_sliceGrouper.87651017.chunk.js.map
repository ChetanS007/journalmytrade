{"version":3,"file":"static/js/json_plugins_sliceGrouper.87651017.chunk.js","mappings":"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","sources":["../node_modules/src/.internal/plugins/sliceGrouper/SliceGrouper.ts"],"sourcesContent":["import type { DataItem } from \"../../core/render/Component\";\nimport type { PercentSeries, IPercentSeriesDataItem } from \"../../charts/percent/PercentSeries\";\nimport type { Legend } from \"../../core/render/Legend\";\n\nimport { Button } from \"../../core/render/Button\";\nimport { Graphics } from \"../../core/render/Graphics\";\nimport { Entity, IEntitySettings, IEntityPrivate, IEntityEvents } from \"../../core/util/Entity\"\n\nimport * as $array from \"../../core/util/Array\";\n\n\nexport interface ISliceGrouperSettings extends IEntitySettings {\n\n\t/**\n\t * A series that will be used to group slices on.\n\t */\n\tseries?: PercentSeries;\n\n\t/**\n\t * If set, plugin will try to manipulate the items in legend, such as\n\t * adding group slice, hiding items for small slices, etc.\n\t */\n\tlegend?: Legend;\n\n\t/**\n\t * Any slice which has percent value less than this setting will be grouped.\n\t * \n\t * @default 5\n\t */\n\tthreshold?: number;\n\n\t/**\n\t * If set, only X first slices will be left as they are. The rest of the\n\t * slices will be grouped.\n\t */\n\tlimit?: number;\n\n\t/**\n\t * Name (category) of the group slice.\n\t *\n\t * @default \"Other\"\n\t */\n\tgroupName?: string;\n\n\t/**\n\t * What happens when group slice is clicked.\n\t *\n\t * * `\"none\"` (default) - nothing.\n\t * * `\"break\"` - underlying small slices are shown.\n\t * * `\"zoom\"` - series shows only small slies (big ones are hidden).\n\t */\n\tclickBehavior?: \"none\" | \"break\" | \"zoom\";\n\n}\n\nexport interface ISliceGrouperPrivate extends IEntityPrivate {\n\tgroupDataItem?: DataItem<IPercentSeriesDataItem>;\n\tnormalDataItems?: DataItem<IPercentSeriesDataItem>[];\n\tsmallDataItems?: DataItem<IPercentSeriesDataItem>[];\n}\n\nexport interface ISliceGrouperEvents extends IEntityEvents {\n}\n\n\n/**\n * A plugin that can be used to automatically group small slices on percent\n * charts into a single slice.\n *\n * @see {@link https://www.amcharts.com/docs/v5/charts/percent-charts/grouping-slices/} for more info\n */\nexport class SliceGrouper extends Entity {\n\tpublic static className: string = \"SliceGrouper\";\n\tpublic static classNames: Array<string> = Entity.classNames.concat([SliceGrouper.className]);\n\n\tdeclare public _settings: ISliceGrouperSettings;\n\tdeclare public _privateSettings: ISliceGrouperPrivate;\n\tdeclare public _events: ISliceGrouperEvents;\n\n\t/**\n\t * A button that is shown when chart small buttons are visible.\n\t */\n\tpublic zoomOutButton?: Button;\n\n\n\tprotected _afterNew(): void {\n\t\tsuper._afterNew();\n\t\tthis._setRawDefault(\"threshold\", 5);\n\t\tthis._setRawDefault(\"groupName\", \"Other\");\n\t\tthis._setRawDefault(\"clickBehavior\", \"none\");\n\t\tthis.initZoomButton();\n\t\tthis._root.addDisposer(this);\n\t}\n\n\tprivate initZoomButton(): void {\n\t\tconst clickBehavior = this.get(\"clickBehavior\");\n\t\tif (clickBehavior !== \"none\") {\n\t\t\tconst container = this.root.tooltipContainer;\n\t\t\tthis.zoomOutButton = container.children.push(Button.new(this._root, {\n\t\t\t\tthemeTags: [\"zoom\"],\n\t\t\t\ticon: Graphics.new(this._root, {\n\t\t\t\t\tthemeTags: [\"button\", \"icon\"]\n\t\t\t\t})\n\t\t\t}));\n\t\t\tthis.zoomOutButton.hide();\n\t\t\tthis.zoomOutButton.events.on(\"click\", () => {\n\t\t\t\tthis.zoomOut();\n\t\t\t});\n\t\t}\n\n\t}\n\n\tprivate handleData(): void {\n\t\tconst series = this.get(\"series\");\n\n\t\tif (series) {\n\n\t\t\t// Create group data item if not yet available\n\t\t\tlet groupDataItem = this.getPrivate(\"groupDataItem\");\n\t\t\tif (!groupDataItem) {\n\n\t\t\t\tconst legend = this.get(\"legend\");\n\t\t\t\tconst categoryField = series.get(\"categoryField\", \"category\");\n\t\t\t\tconst valueField = series.get(\"valueField\", \"value\");\n\n\t\t\t\t// Add slice\n\t\t\t\tconst groupSliceData: any = {};\n\t\t\t\tgroupSliceData[categoryField] = this.get(\"groupName\", \"\");\n\t\t\t\tgroupSliceData[valueField] = 0;\n\t\t\t\tseries.data.push(groupSliceData);\n\n\t\t\t\tgroupDataItem = series.dataItems[series.dataItems.length - 1];\n\n\t\t\t\tgroupDataItem.get(\"slice\").events.on(\"click\", () => {\n\t\t\t\t\tthis.handleClick();\n\t\t\t\t});\n\n\t\t\t\tthis.setPrivate(\"groupDataItem\", groupDataItem);\n\n\t\t\t\t// Add to legend\n\t\t\t\tif (legend) {\n\t\t\t\t\tlegend.data.push(groupDataItem);\n\n\t\t\t\t\t//const legendDataItem = groupDataItem.get(\"legendDataItem\");\n\t\t\t\t\tgroupDataItem.on(\"visible\", (visible) => {\n\t\t\t\t\t\tif (visible) {\n\t\t\t\t\t\t\tthis.zoomOut();\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Recalculate group value and decorate small slices as necessary\n\t\t\tconst threshold = this.get(\"threshold\", 0);\n\t\t\tconst limit = this.get(\"limit\", 1000);\n\t\t\tconst normalDataItems: any = [];\n\t\t\tconst smallDataItems: any = [];\n\t\t\tlet groupValue = 0;\n\t\t\tif (threshold || limit) {\n\n\t\t\t\t$array.each(series.dataItems, (item, index) => {\n\t\t\t\t\tconst legendDataItem = item.get(\"legendDataItem\");\n\t\t\t\t\tif (((item.get(\"valuePercentTotal\") <= threshold) || (index > (limit - 1))) && groupDataItem !== item) {\n\t\t\t\t\t\tgroupValue += item.get(\"value\", 0);\n\t\t\t\t\t\tsmallDataItems.push(item);\n\t\t\t\t\t\titem.hide(0);\n\t\t\t\t\t\tif (legendDataItem) {\n\t\t\t\t\t\t\tlegendDataItem.get(\"itemContainer\").hide(0);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tnormalDataItems.push(item);\n\t\t\t\t\t\tif (legendDataItem) {\n\t\t\t\t\t\t\tlegendDataItem.get(\"itemContainer\").show(0);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tthis.setPrivate(\"normalDataItems\", normalDataItems);\n\t\t\t\tthis.setPrivate(\"smallDataItems\", smallDataItems);\n\t\t\t\tthis.updateGroupDataItem(groupValue);\n\n\t\t\t}\n\n\t\t}\n\t}\n\n\t/**\n\t * Resets slice setup to original grouping state.\n\t */\n\tpublic zoomOut(): void {\n\t\tconst groupDataItem = this.getPrivate(\"groupDataItem\");\n\t\tif (groupDataItem) {\n\t\t\tgroupDataItem.show();\n\t\t}\n\n\t\tconst clickBehavior = this.get(\"clickBehavior\");\n\t\tif (clickBehavior == \"zoom\") {\n\t\t\tconst normalDataItems: any = this.getPrivate(\"normalDataItems\", []);\n\t\t\t$array.each(normalDataItems, (item: any, _index) => {\n\t\t\t\titem.show();\n\t\t\t});\n\t\t}\n\n\t\tconst smallDataItems: any = this.getPrivate(\"smallDataItems\", []);\n\t\t$array.each(smallDataItems, (item: any, _index) => {\n\t\t\titem.hide();\n\t\t});\n\n\t\tif (this.zoomOutButton) {\n\t\t\tthis.zoomOutButton.hide();\n\t\t}\n\t}\n\n\tprivate updateGroupDataItem(groupValue: number): void {\n\t\tconst series = this.get(\"series\");\n\t\tif (series) {\n\t\t\tconst groupSliceData: any = {};\n\t\t\tconst categoryField = series.get(\"categoryField\", \"category\");\n\t\t\tconst valueField = series.get(\"valueField\", \"value\");\n\t\t\tgroupSliceData[categoryField] = this.get(\"groupName\", \"\");\n\t\t\tgroupSliceData[valueField] = groupValue;\n\t\t\tseries.data.setIndex(series.data.length - 1, groupSliceData);\n\n\t\t\tconst groupDataItem = this.getPrivate(\"groupDataItem\");\n\t\t\tif (groupValue == 0) {\n\t\t\t\tgroupDataItem!.hide(0);\n\t\t\t}\n\t\t\telse if (groupDataItem!.isHidden()) {\n\t\t\t\tgroupDataItem!.show();\n\t\t\t}\n\n\t\t\tconst clickBehavior = this.get(\"clickBehavior\");\n\t\t\tif (clickBehavior != \"none\") {\n\t\t\t\tgroupDataItem!.get(\"slice\").set(\"toggleKey\", \"none\");\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate handleClick(): void {\n\t\tconst clickBehavior = this.get(\"clickBehavior\");\n\t\tconst smallDataItems = this.getPrivate(\"smallDataItems\");\n\n\t\tif (clickBehavior == \"none\" || (smallDataItems && smallDataItems.length == 0)) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst series = this.get(\"series\");\n\t\tconst groupDataItem = this.getPrivate(\"groupDataItem\");\n\n\t\t// Hide group slice\n\t\tgroupDataItem!.hide();\n\n\t\t// Reveal small slices\n\t\t$array.each(series!.dataItems, (item) => {\n\t\t\tif (smallDataItems!.indexOf(item) !== -1) {\n\t\t\t\titem.show();\n\t\t\t}\n\t\t\telse if (clickBehavior == \"zoom\") {\n\t\t\t\titem.hide();\n\t\t\t}\n\t\t});\n\n\t\tthis.zoomOutButton!.show();\n\t}\n\n\tpublic _beforeChanged() {\n\t\tsuper._beforeChanged();\n\n\t\tif (this.isDirty(\"series\")) {\n\t\t\tconst series = this.get(\"series\");\n\t\t\tif (series) {\n\t\t\t\tseries.events.on(\"datavalidated\", (_ev) => {\n\t\t\t\t\tthis.handleData();\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t}\n\n}"],"names":["SliceGrouper","_Entity","_inherits","_super","_createSuper","_this","_classCallCheck","Object","defineProperty","_assertThisInitialized","_createClass","key","value","_get","_getPrototypeOf","prototype","call","this","_setRawDefault","initZoomButton","_root","addDisposer","_this2","get","container","root","tooltipContainer","zoomOutButton","children","push","Button","new","themeTags","icon","Graphics","hide","events","on","zoomOut","_this3","series","groupDataItem","getPrivate","legend","categoryField","valueField","groupSliceData","data","dataItems","length","handleClick","setPrivate","visible","threshold","limit","normalDataItems","smallDataItems","groupValue","$array","item","index","legendDataItem","show","updateGroupDataItem","_index","setIndex","isHidden","set","clickBehavior","indexOf","_this4","isDirty","_ev","handleData","Entity","classNames","concat","className"],"sourceRoot":""}