{"version":3,"file":"static/js/json_percent.3b9fc431.chunk.js","mappings":"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","sources":["../node_modules/src/.internal/charts/percent/PercentDefaultTheme.ts","../node_modules/src/.internal/charts/percent/PercentChart.ts","../node_modules/src/.internal/charts/percent/PercentSeries.ts","../node_modules/src/.internal/charts/pie/PieChart.ts","../node_modules/src/.internal/charts/pie/PieSeries.ts","../node_modules/src/.internal/charts/funnel/FunnelSlice.ts","../node_modules/src/.internal/charts/funnel/FunnelSeries.ts","../node_modules/src/.internal/charts/funnel/PyramidSeries.ts","../node_modules/src/.internal/charts/funnel/PictorialStackedSeries.ts","../node_modules/src/.internal/charts/funnel/SlicedChart.ts"],"sourcesContent":["import { Theme } from \"../../core/Theme\";\r\nimport { percent, p50, p100 } from \"../../core/util/Percent\";\r\nimport { ColorSet } from \"../../core/util/ColorSet\";\r\nimport { setColor } from \"../../themes/DefaultTheme\";\r\n\r\n\r\n/**\r\n * @ignore\r\n */\r\nexport class PercentDefaultTheme extends Theme {\r\n\tprotected setupDefaultRules() {\r\n\t\tsuper.setupDefaultRules();\r\n\r\n\t\tconst ic = this._root.interfaceColors;\r\n\t\tconst r = this.rule.bind(this);\r\n\r\n\t\t/**\r\n\t\t * ========================================================================\r\n\t\t * charts/percent\r\n\t\t * ========================================================================\r\n\t\t */\r\n\r\n\t\tr(\"PercentSeries\").setAll({\r\n\t\t\tlegendLabelText: \"{category}\",\r\n\t\t\tlegendValueText: \"{valuePercentTotal.formatNumber('0.00p')}\",\r\n\t\t\tcolors: ColorSet.new(this._root, {}),\r\n\t\t\twidth: p100,\r\n\t\t\theight: p100\r\n\t\t});\r\n\r\n\t\t/**\r\n\t\t * ========================================================================\r\n\t\t * charts/pie\r\n\t\t * ========================================================================\r\n\t\t */\r\n\r\n\t\tr(\"PieChart\").setAll({\r\n\t\t\tradius: percent(80),\r\n\t\t\tstartAngle: -90,\r\n\t\t\tendAngle: 270\r\n\t\t})\r\n\r\n\t\tr(\"PieSeries\").setAll({\r\n\t\t\talignLabels: true,\r\n\t\t\tstartAngle: -90,\r\n\t\t\tendAngle: 270\r\n\t\t});\r\n\r\n\t\tr(\"PieSeries\").states.create(\"hidden\", { endAngle: -90, opacity: 0 });\r\n\r\n\t\tr(\"Slice\", [\"pie\"]).setAll({\r\n\t\t\tposition: \"absolute\",\r\n\t\t\tisMeasured: false,\r\n\t\t\tx: 0,\r\n\t\t\ty: 0,\r\n\t\t\ttoggleKey: \"active\",\r\n\t\t\ttooltipText: \"{category}: {valuePercentTotal.formatNumber('0.00p')}\",\r\n\t\t\tstrokeWidth: 1,\r\n\t\t\tstrokeOpacity: 1,\r\n\t\t\trole: \"figure\",\r\n\t\t\tlineJoin:\"round\"\r\n\t\t});\r\n\r\n\t\tr(\"Slice\", [\"pie\"]).states.create(\"active\", { shiftRadius: 20, scale: 1 });\r\n\t\tr(\"Slice\", [\"pie\"]).states.create(\"hoverActive\", { scale: 1.04 });\r\n\t\tr(\"Slice\", [\"pie\"]).states.create(\"hover\", { scale: 1.04 });\r\n\r\n\t\tr(\"RadialLabel\", [\"pie\"]).setAll({\r\n\t\t\ttextType: \"aligned\",\r\n\t\t\tradius: 10,\r\n\t\t\ttext: \"{category}: {valuePercentTotal.formatNumber('0.00p')}\",\r\n\t\t\tpaddingTop: 5,\r\n\t\t\tpaddingBottom: 5,\r\n\t\t\tpopulateText: true\r\n\t\t});\r\n\r\n\t\tr(\"Tick\", [\"pie\"]).setAll({\r\n\t\t\tlocation: 1\r\n\t\t});\r\n\r\n\r\n\t\t/**\r\n\t\t * ========================================================================\r\n\t\t * charts/funnel\r\n\t\t * ========================================================================\r\n\t\t */\r\n\r\n\t\tr(\"SlicedChart\").setAll({\r\n\t\t\tpaddingLeft: 10,\r\n\t\t\tpaddingRight: 10,\r\n\t\t\tpaddingTop: 10,\r\n\t\t\tpaddingBottom: 10\r\n\t\t});\r\n\r\n\t\t/**\r\n\t\t * ------------------------------------------------------------------------\r\n\t\t * charts/funnel: Funnel\r\n\t\t * ------------------------------------------------------------------------\r\n\t\t */\r\n\r\n\t\tr(\"FunnelSeries\").setAll({\r\n\t\t\tstartLocation: 0,\r\n\t\t\tendLocation: 1,\r\n\t\t\torientation: \"vertical\",\r\n\t\t\talignLabels: true,\r\n\t\t\tsequencedInterpolation: true\r\n\t\t});\r\n\r\n\t\tr(\"FunnelSlice\").setAll({\r\n\t\t\tinteractive: true,\r\n\t\t\texpandDistance: 0,\r\n\t\t\t//tooltipText: \"{category}: {valuePercentTotal.formatNumber('0.00p')}\"\r\n\t\t});\r\n\r\n\t\tr(\"FunnelSlice\").states.create(\"hover\", { expandDistance: 0.15 })\r\n\r\n\t\tr(\"Label\", [\"funnel\"]).setAll({\r\n\t\t\tpopulateText: true,\r\n\t\t\ttext: \"{category}: {valuePercentTotal.formatNumber('0.00p')}\",\r\n\t\t\tcenterY: p50\r\n\t\t});\r\n\r\n\t\tr(\"Label\", [\"funnel\", \"horizontal\"]).setAll({\r\n\t\t\tcenterX: 0,\r\n\t\t\tcenterY: p50,\r\n\t\t\trotation: -90\r\n\t\t});\r\n\r\n\t\t// Class: Label\r\n\t\tr(\"Label\", [\"funnel\", \"vertical\"]).setAll({\r\n\t\t\tcenterY: p50,\r\n\t\t\tcenterX: 0\r\n\t\t});\r\n\r\n\t\tr(\"Tick\", [\"funnel\"]).setAll({\r\n\t\t\tlocation: 1\r\n\t\t});\r\n\r\n\t\tr(\"FunnelSlice\", [\"funnel\", \"link\"]).setAll({\r\n\t\t\tfillOpacity: 0.5,\r\n\t\t\tstrokeOpacity: 0,\r\n\t\t\texpandDistance: -0.1\r\n\t\t});\r\n\r\n\t\tr(\"FunnelSlice\", [\"funnel\", \"link\", \"vertical\"]).setAll({\r\n\t\t\theight: 10,\r\n\t\t});\r\n\r\n\t\tr(\"FunnelSlice\", [\"funnel\", \"link\", \"horizontal\"]).setAll({\r\n\t\t\twidth: 10\r\n\t\t});\r\n\r\n\r\n\t\t/**\r\n\t\t * ------------------------------------------------------------------------\r\n\t\t * charts/funnel: Pyramid\r\n\t\t * ------------------------------------------------------------------------\r\n\t\t */\r\n\r\n\t\tr(\"PyramidSeries\").setAll({\r\n\t\t\tvalueIs: \"area\"\r\n\t\t});\r\n\r\n\t\tr(\"FunnelSlice\", [\"pyramid\", \"link\"]).setAll({\r\n\t\t\tfillOpacity: 0.5\r\n\t\t});\r\n\r\n\t\tr(\"FunnelSlice\", [\"pyramid\", \"link\", \"vertical\"]).setAll({\r\n\t\t\theight: 0\r\n\t\t});\r\n\r\n\t\tr(\"FunnelSlice\", [\"pyramid\", \"link\", \"horizontal\"]).setAll({\r\n\t\t\twidth: 0\r\n\t\t});\r\n\r\n\t\tr(\"FunnelSlice\", [\"pyramid\"]).setAll({\r\n\t\t\tinteractive: true,\r\n\t\t\texpandDistance: 0\r\n\t\t});\r\n\r\n\t\tr(\"FunnelSlice\", [\"pyramid\"]).states.create(\"hover\", { expandDistance: 0.15 });\r\n\r\n\t\tr(\"Label\", [\"pyramid\"]).setAll({\r\n\t\t\tpopulateText: true,\r\n\t\t\ttext: \"{category}: {valuePercentTotal.formatNumber('0.00p')}\",\r\n\t\t\tcenterY: p50\r\n\t\t});\r\n\r\n\t\tr(\"Label\", [\"pyramid\", \"horizontal\"]).setAll({\r\n\t\t\tcenterX: 0,\r\n\t\t\tcenterY: p50,\r\n\t\t\trotation: -90\r\n\t\t});\r\n\r\n\t\tr(\"Label\", [\"pyramid\", \"vertical\"]).setAll({\r\n\t\t\tcenterY: p50,\r\n\t\t\tcenterX: 0\r\n\t\t});\r\n\r\n\t\tr(\"Tick\", [\"pyramid\"]).setAll({\r\n\t\t\tlocation: 1\r\n\t\t});\r\n\r\n\r\n\t\t/**\r\n\t\t * ------------------------------------------------------------------------\r\n\t\t * charts/funnel: Pictorial\r\n\t\t * ------------------------------------------------------------------------\r\n\t\t */\r\n\r\n\t\t// Class: FunnelSlice\r\n\t\tr(\"FunnelSlice\", [\"pictorial\"]).setAll({\r\n\t\t\tinteractive: true,\r\n\t\t\ttooltipText: \"{category}: {valuePercentTotal.formatNumber('0.00p')}\"\r\n\t\t});\r\n\r\n\t\tr(\"Label\", [\"pictorial\"]).setAll({\r\n\t\t\tpopulateText: true,\r\n\t\t\ttext: \"{category}: {valuePercentTotal.formatNumber('0.00p')}\",\r\n\t\t\tcenterY: p50\r\n\t\t});\r\n\r\n\t\tr(\"Label\", [\"pictorial\", \"horizontal\"]).setAll({\r\n\t\t\tcenterX: 0,\r\n\t\t\tcenterY: p50,\r\n\t\t\trotation: -90\r\n\t\t});\r\n\r\n\t\tr(\"Label\", [\"pictorial\", \"vertical\"]).setAll({\r\n\t\t\tcenterY: p50,\r\n\t\t\tcenterX: 0\r\n\t\t});\r\n\r\n\t\tr(\"FunnelSlice\", [\"pictorial\", \"link\"]).setAll({\r\n\t\t\tfillOpacity: 0.5,\r\n\t\t\twidth: 0,\r\n\t\t\theight: 0\r\n\t\t});\r\n\r\n\t\tr(\"Tick\", [\"pictorial\"]).setAll({\r\n\t\t\tlocation: 0.5\r\n\t\t});\r\n\r\n\t\t{\r\n\t\t\tconst rule = r(\"Graphics\", [\"pictorial\", \"background\"]);\r\n\r\n\t\t\trule.setAll({\r\n\t\t\t\tfillOpacity: 0.2\r\n\t\t\t});\r\n\r\n\t\t\tsetColor(rule, \"fill\", ic, \"alternativeBackground\");\r\n\t\t}\r\n\r\n\t}\r\n}\r\n","import type { PercentSeries } from \"./PercentSeries\";\nimport { SerialChart, ISerialChartPrivate, ISerialChartSettings } from \"../../core/render/SerialChart\";\nimport { PercentDefaultTheme } from \"./PercentDefaultTheme\";\n\nexport interface IPercentChartSettings extends ISerialChartSettings {\n}\n\nexport interface IPercentChartPrivate extends ISerialChartPrivate {\n}\n\n/**\n * Base class for [[PieChart]].\n *\n * Also used for percent-based series, like [[FunnelSeries]], [[PyramidSeries]], etc.\n *\n * @important\n */\nexport abstract class PercentChart extends SerialChart {\n\tpublic static className: string = \"PercentChart\";\n\tpublic static classNames: Array<string> = SerialChart.classNames.concat([PercentChart.className]);\n\n\tdeclare public _settings: IPercentChartSettings;\n\tdeclare public _privateSettings: IPercentChartPrivate;\n\tdeclare public _seriesType: PercentSeries;\n\n\tprotected _afterNew() {\n\t\tthis._defaultThemes.push(PercentDefaultTheme.new(this._root));\n\n\t\tsuper._afterNew();\n\n\t\tthis.chartContainer.children.push(this.seriesContainer);\n\t\tthis.seriesContainer.children.push(this.bulletsContainer);\n\t}\n\n\tprotected _processSeries(series: this[\"_seriesType\"]) {\n\t\tsuper._processSeries(series);\n\t\tthis.seriesContainer.children.moveValue(this.bulletsContainer, this.seriesContainer.children.length - 1);\t\n\t}\t\n}\n","import type { DataItem } from \"../../core/render/Component\";\nimport type { Graphics } from \"../../core/render/Graphics\";\nimport type { Label } from \"../../core/render/Label\";\nimport type { Tick } from \"../../core/render/Tick\";\nimport type { ListTemplate } from \"../../core/util/List\";\nimport type { ColorSet } from \"../../core/util/ColorSet\";\nimport type { ILegendDataItem } from \"../../core/render/Legend\";\nimport type { Color } from \"../../core/util/Color\";\nimport type { PercentChart } from \"./PercentChart\";\n\nimport { Series, ISeriesSettings, ISeriesDataItem, ISeriesPrivate } from \"../../core/render/Series\";\nimport { Container } from \"../../core/render/Container\";\nimport { visualSettings } from \"../../core/render/Graphics\";\n\nimport * as $array from \"../../core/util/Array\";\nimport * as $type from \"../../core/util/Type\";\n\nexport interface IPercentSeriesDataItem extends ISeriesDataItem {\n\n\t/**\n\t * Percent of the series value total.\n\t */\n\tvaluePercentTotal: number;\n\n\t/**\n\t * Category.\n\t */\n\tcategory: string;\n\n\t/**\n\t * Slice visual element.\n\t */\n\tslice: Graphics;\n\n\t/**\n\t * Slice label.\n\t */\n\tlabel: Label;\n\n\t/**\n\t * Slice tick.\n\t */\n\ttick: Tick;\n\n\t/**\n\t * A related legend data item.\n\t */\n\tlegendDataItem: DataItem<ILegendDataItem>;\n\n\t/**\n\t * Fill color used for the slice and related elements, e.g. legend marker.\n\t */\n\tfill: Color;\n\n}\n\n//type IPercentSeriesDataItemSettings = { [K in keyof IPercentSeriesDataItem]?: string; };\n\nexport interface IPercentSeriesSettings extends ISeriesSettings {\n\n\t/**\n\t * A [[ColorSet]] to use when asigning colors for slices.\n\t */\n\tcolors?: ColorSet;\n\n\t/**\n\t * A field in data that holds category names.\n\t */\n\tcategoryField?: string;\n\n\t/**\n\t * Should slice labels be aligned in columns/rows?\n\t */\n\talignLabels?: boolean;\n\n\t/**\n\t * A field that holds color for slice fill.\n\t */\n\tfillField?: string;\n\n}\n\nexport interface IPercentSeriesPrivate extends ISeriesPrivate {\n\n\t/**\n\t * Calculate average value in series.\n\t */\n\tvalueAverage?: number;\n\n\t/**\n\t * Count of items in series.\n\t */\n\tvalueCount?: number;\n\n\t/**\n\t * Sum of values in series.\n\t */\n\tvalueSum?: number;\n\n\t/**\n\t * Sum of all absolute values in series.\n\t */\n\tvalueAbsoluteSum?: number;\n\n\t/**\n\t * Lowest value in series.\n\t */\n\tvalueLow?: number;\n\n\t/**\n\t * Highest value in series.\n\t */\n\tvalueHigh?: number;\n\n}\n\n/**\n * A base class for any percent chart series.\n */\nexport abstract class PercentSeries extends Series {\n\tpublic static className: string = \"PercentSeries\";\n\tpublic static classNames: Array<string> = Series.classNames.concat([PercentSeries.className]);\n\n\tdeclare public _settings: IPercentSeriesSettings;\n\tdeclare public _privateSettings: IPercentSeriesPrivate;\n\tdeclare public _dataItemSettings: IPercentSeriesDataItem;\n\n\tdeclare public _sliceType: Graphics;\n\tdeclare public _labelType: Label;\n\tdeclare public _tickType: Tick;\n\n\tpublic readonly slicesContainer = this.children.push(Container.new(this._root, { position: \"absolute\", isMeasured: false }));\n\tpublic readonly labelsContainer = this.children.push(Container.new(this._root, { position: \"absolute\", isMeasured: false }));\n\tpublic readonly ticksContainer = this.children.push(Container.new(this._root, { position: \"absolute\", isMeasured: false }));\n\n\tprotected _lLabels: Array<{ label: Label, y: number }> = [];\n\tprotected _rLabels: Array<{ label: Label, y: number }> = [];\n\tprotected _hLabels: Array<{ label: Label, y: number }> = [];\n\n\t/**\n\t * A [[ListTemplate]] of all slices in series.\n\t *\n\t * `slices.template` can also be used to configure slices.\n\t */\n\tpublic readonly slices: ListTemplate<this[\"_sliceType\"]> = this._makeSlices();\n\n\tprotected abstract _makeSlices(): ListTemplate<this[\"_sliceType\"]>;\n\n\tpublic abstract chart: PercentChart | undefined;\n\n\t/**\n\t * @ignore\n\t */\n\tpublic makeSlice(dataItem: DataItem<this[\"_dataItemSettings\"]>): this[\"_sliceType\"] {\n\t\tconst slice = this.slicesContainer.children.push(this.slices.make());\n\n\t\tslice.on(\"fill\", () => {\n\t\t\tthis.updateLegendMarker(dataItem);\n\t\t})\n\n\t\tslice.on(\"stroke\", () => {\n\t\t\tthis.updateLegendMarker(dataItem);\n\t\t})\n\n\t\tslice._setDataItem(dataItem);\n\t\tdataItem.set(\"slice\", slice);\n\t\tthis.slices.push(slice);\n\n\t\treturn slice;\n\t}\n\n\t/**\n\t * A [[ListTemplate]] of all slice labels in series.\n\t *\n\t * `labels.template` can also be used to configure slice labels.\n\t */\n\tpublic readonly labels: ListTemplate<this[\"_labelType\"]> = this._makeLabels();\n\n\tprotected abstract _makeLabels(): ListTemplate<this[\"_labelType\"]>;\n\n\t/**\n\t * @ignore\n\t */\n\tpublic makeLabel(dataItem: DataItem<this[\"_dataItemSettings\"]>): this[\"_labelType\"] {\n\t\tconst label = this.labelsContainer.children.push(this.labels.make());\n\t\tlabel._setDataItem(dataItem);\n\t\tdataItem.set(\"label\", label);\n\t\tthis.labels.push(label);\n\t\treturn label;\n\t}\n\n\t/**\n\t * A [[ListTemplate]] of all slice ticks in series.\n\t *\n\t * `ticks.template` can also be used to configure slice ticks.\n\t */\n\tpublic readonly ticks: ListTemplate<this[\"_tickType\"]> = this._makeTicks();\n\n\tprotected abstract _makeTicks(): ListTemplate<this[\"_tickType\"]>;\n\n\n\tprotected _shouldMakeBullet(dataItem: DataItem<this[\"_dataItemSettings\"]>): boolean {\n\t\tif (dataItem.get(\"value\") != null) {\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic makeTick(dataItem: DataItem<this[\"_dataItemSettings\"]>): this[\"_tickType\"] {\n\t\tconst tick = this.ticksContainer.children.push(this.ticks.make());\n\t\ttick._setDataItem(dataItem);\n\t\tdataItem.set(\"tick\", tick);\n\t\tthis.ticks.push(tick);\n\t\treturn tick;\n\t}\n\n\tprotected _afterNew() {\n\t\tthis.fields.push(\"category\", \"fill\");\n\t\tsuper._afterNew();\n\t}\n\n\tprotected _onDataClear() {\n\t\tconst colors = this.get(\"colors\");\n\t\tif (colors) {\n\t\t\tcolors.reset();\n\t\t}\n\t}\n\n\tpublic _prepareChildren() {\n\t\tsuper._prepareChildren();\n\n\t\tthis._lLabels = [];\n\t\tthis._rLabels = [];\n\t\tthis._hLabels = [];\n\n\t\tif (this._valuesDirty) {\n\t\t\tlet sum = 0;\n\t\t\tlet absSum = 0;\n\t\t\tlet valueHigh = 0;\n\t\t\tlet valueLow = Infinity;\n\t\t\tlet count = 0;\n\t\t\t$array.each(this._dataItems, (dataItem) => {\n\t\t\t\tlet valueWorking = dataItem.get(\"valueWorking\", 0);\n\t\t\t\tsum += valueWorking;\n\t\t\t\tabsSum += Math.abs(valueWorking);\n\t\t\t});\n\n\t\t\t$array.each(this._dataItems, (dataItem) => {\n\t\t\t\tlet value = dataItem.get(\"valueWorking\", 0);\n\n\t\t\t\tif (value > valueHigh) {\n\t\t\t\t\tvalueHigh = value;\n\t\t\t\t}\n\n\t\t\t\tif (value < valueLow) {\n\t\t\t\t\tvalueLow = value;\n\t\t\t\t}\n\n\t\t\t\tcount++;\n\n\t\t\t\tlet percentTotal = value / absSum;\n\n\t\t\t\tif (absSum == 0) {\n\t\t\t\t\tpercentTotal = 0;\n\t\t\t\t}\n\n\t\t\t\tdataItem.setRaw(\"valuePercentTotal\", percentTotal * 100);\n\t\t\t});\n\n\t\t\tthis.setPrivateRaw(\"valueLow\", valueLow);\n\t\t\tthis.setPrivateRaw(\"valueHigh\", valueHigh);\n\t\t\tthis.setPrivateRaw(\"valueSum\", sum);\n\t\t\tthis.setPrivateRaw(\"valueAverage\", sum / count);\n\t\t\tthis.setPrivateRaw(\"valueAbsoluteSum\", absSum);\n\t\t}\n\t}\n\n\t/**\n\t * Shows hidden series.\n\t *\n\t * @param   duration  Animation duration in milliseconds\n\t * @return            Animation promise\n\t */\n\tpublic async show(duration?: number): Promise<void> {\n\t\tlet promises: Array<Promise<any>> = [];\n\t\tpromises.push(super.show(duration))\n\n\t\tpromises.push(this._sequencedShowHide(true, duration));\n\t\tawait Promise.all(promises);\n\t}\n\n\t/**\n\t * Hide whole series.\n\t *\n\t * @param   duration  Animation duration in milliseconds\n\t * @return            Animation promise\n\t */\n\tpublic async hide(duration?: number): Promise<void> {\n\t\tlet promises: Array<Promise<any>> = [];\n\t\tpromises.push(super.hide(duration))\n\n\t\tpromises.push(this._sequencedShowHide(false, duration));\n\t\tawait Promise.all(promises);\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic _updateChildren() {\n\t\tsuper._updateChildren();\n\t\tif (this._valuesDirty) {\n\t\t\t$array.each(this._dataItems, (dataItem) => {\n\t\t\t\tdataItem.get(\"label\").text.markDirtyText();\n\t\t\t});\n\t\t}\n\n\t\tif (this.isDirty(\"legendLabelText\") || this.isDirty(\"legendValueText\")) {\n\t\t\t$array.each(this._dataItems, (dataItem) => {\n\t\t\t\tthis.updateLegendValue(dataItem);\n\t\t\t});\n\t\t}\n\n\t\tthis._arrange();\n\t}\n\n\tprotected _arrange() {\n\t\tthis._arrangeDown(this._lLabels);\n\t\tthis._arrangeUp(this._lLabels);\n\n\t\tthis._arrangeDown(this._rLabels);\n\t\tthis._arrangeUp(this._rLabels);\n\n\t\tthis._arrangeLeft(this._hLabels);\n\t\tthis._arrangeRight(this._hLabels);\n\n\t\t$array.each(this.dataItems, (dataItem) => {\n\t\t\tthis._updateTick(dataItem);\n\t\t})\n\t}\n\n\n\tpublic _afterChanged() {\n\t\tsuper._afterChanged();\n\t\tthis._arrange();\n\t}\n\n\tprotected processDataItem(dataItem: DataItem<this[\"_dataItemSettings\"]>) {\n\t\tsuper.processDataItem(dataItem);\n\n\t\tif (dataItem.get(\"fill\") == null) {\n\t\t\tlet colors = this.get(\"colors\");\n\t\t\tif (colors) {\n\t\t\t\tdataItem.setRaw(\"fill\", colors.next());\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Shows series's data item.\n\t *\n\t * @param   dataItem  Data item\n\t * @param   duration  Animation duration in milliseconds\n\t * @return            Promise\n\t */\n\tpublic async showDataItem(dataItem: DataItem<this[\"_dataItemSettings\"]>, duration?: number): Promise<void> {\n\t\tconst promises = [super.showDataItem(dataItem, duration)];\n\t\tif (!$type.isNumber(duration)) {\n\t\t\tduration = this.get(\"stateAnimationDuration\", 0);\n\t\t}\n\n\t\tconst easing = this.get(\"stateAnimationEasing\");\n\n\t\tlet value = dataItem.get(\"value\");\n\n\t\tconst animation = dataItem.animate({ key: \"valueWorking\", to: value, duration: duration, easing: easing });\n\t\tif (animation) {\n\t\t\tpromises.push(animation.waitForStop());\n\t\t}\n\n\t\tconst tick = dataItem.get(\"tick\");\n\t\tif (tick) {\n\t\t\tpromises.push(tick.show(duration));\n\t\t}\n\t\tconst label = dataItem.get(\"label\");\n\t\tif (label) {\n\t\t\tpromises.push(label.show(duration));\n\t\t}\n\n\t\tconst slice = dataItem.get(\"slice\");\n\t\tif (slice) {\n\t\t\tpromises.push(slice.show(duration));\n\t\t}\n\n\t\tif(slice.get(\"active\")){\n\t\t\tslice.states.applyAnimate(\"active\");\n\t\t}\n\n\t\tawait Promise.all(promises);\n\t}\n\n\t/**\n\t * Hides series's data item.\n\t *\n\t * @param   dataItem  Data item\n\t * @param   duration  Animation duration in milliseconds\n\t * @return            Promise\n\t */\n\tpublic async hideDataItem(dataItem: DataItem<this[\"_dataItemSettings\"]>, duration?: number): Promise<void> {\n\t\tconst promises = [super.hideDataItem(dataItem, duration)];\n\t\tconst hiddenState = this.states.create(\"hidden\", {})\n\n\t\tif (!$type.isNumber(duration)) {\n\t\t\tduration = hiddenState.get(\"stateAnimationDuration\", this.get(\"stateAnimationDuration\", 0));\n\t\t}\n\n\t\tconst easing = hiddenState.get(\"stateAnimationEasing\", this.get(\"stateAnimationEasing\"));\n\n\t\tconst animation = dataItem.animate({ key: \"valueWorking\", to: 0, duration: duration, easing: easing });\n\t\tif (animation) {\n\t\t\tpromises.push(animation.waitForStop());\n\t\t}\n\n\t\tconst tick = dataItem.get(\"tick\");\n\t\tif (tick) {\n\t\t\tpromises.push(tick.hide(duration));\n\t\t}\n\t\tconst label = dataItem.get(\"label\");\n\t\tif (label) {\n\t\t\tpromises.push(label.hide(duration));\n\t\t}\n\n\t\tconst slice = dataItem.get(\"slice\");\n\t\tslice.hideTooltip();\n\n\t\tif (slice) {\n\t\t\tpromises.push(slice.hide(duration));\n\t\t}\n\n\t\tawait Promise.all(promises);\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic disposeDataItem(dataItem: DataItem<this[\"_dataItemSettings\"]>) {\n\t\tsuper.disposeDataItem(dataItem);\n\t\tlet label = dataItem.get(\"label\");\n\t\tif (label) {\n\t\t\tthis.labels.removeValue(label);\n\t\t\tlabel.dispose();\n\t\t}\n\t\tlet tick = dataItem.get(\"tick\");\n\t\tif (tick) {\n\t\t\tthis.ticks.removeValue(tick);\n\t\t\ttick.dispose();\n\t\t}\n\t\tlet slice = dataItem.get(\"slice\");\n\t\tif (slice) {\n\t\t\tthis.slices.removeValue(slice);\n\t\t\tslice.dispose();\n\t\t}\n\t}\n\n\t/**\n\t * Triggers hover on a series data item.\n\t *\n\t * @since 5.0.7\n\t * @param  dataItem  Target data item\n\t */\n\tpublic hoverDataItem(dataItem: DataItem<this[\"_dataItemSettings\"]>) {\n\t\tconst slice = dataItem.get(\"slice\");\n\t\tif (slice && !slice.isHidden()) {\n\t\t\tslice.hover();\n\t\t}\n\t}\n\n\t/**\n\t * Triggers un-hover on a series data item.\n\t *\n\t * @since 5.0.7\n\t * @param  dataItem  Target data item\n\t */\n\tpublic unhoverDataItem(dataItem: DataItem<this[\"_dataItemSettings\"]>) {\n\t\tconst slice = dataItem.get(\"slice\");\n\t\tif (slice) {\n\t\t\tslice.unhover();\n\t\t}\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic updateLegendMarker(dataItem: DataItem<this[\"_dataItemSettings\"]>) {\n\t\tif(dataItem){\n\t\t\tconst slice = dataItem.get(\"slice\");\n\n\t\t\tif (slice) {\n\t\t\t\tconst legendDataItem = dataItem.get(\"legendDataItem\");\n\t\t\t\tif (legendDataItem) {\n\t\t\t\t\tconst markerRectangle = legendDataItem.get(\"markerRectangle\");\n\t\t\t\t\t$array.each(visualSettings, (setting: any) => {\n\t\t\t\t\t\tif (slice.get(setting) != null) {\n\t\t\t\t\t\t\tmarkerRectangle.set(setting, slice.get(setting));\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprotected _arrangeDown(labels?: Array<{ label: Label, y: number }>) {\n\t\tif (labels) {\n\n\t\t\tlet next = this._getNextDown();\n\n\t\t\tlabels.sort((a, b) => {\n\t\t\t\tif (a.y > b.y) {\n\t\t\t\t\treturn 1;\n\t\t\t\t}\n\t\t\t\telse if (a.y < b.y) {\n\t\t\t\t\treturn -1;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\t\t\t})\n\n\t\t\t$array.each(labels, (l) => {\n\t\t\t\tconst bounds = l.label.adjustedLocalBounds();\n\t\t\t\tlet labelTop = bounds.top;\n\t\t\t\tif (l.y + labelTop < next) {\n\t\t\t\t\tl.y = next - labelTop;\n\t\t\t\t}\n\t\t\t\tl.label.set(\"y\", l.y);\n\n\t\t\t\tnext = l.y + bounds.bottom;\n\t\t\t})\n\t\t}\n\t}\n\n\tprotected _getNextUp() {\n\t\treturn this.labelsContainer.maxHeight();\n\t}\n\n\tprotected _getNextDown() {\n\t\treturn 0;\n\t}\n\n\tprotected _arrangeUp(labels?: Array<{ label: Label, y: number }>) {\n\t\tif (labels) {\n\t\t\tlet next = this._getNextUp();\n\n\t\t\tlabels.sort((a, b) => {\n\t\t\t\tif (a.y < b.y) {\n\t\t\t\t\treturn 1;\n\t\t\t\t}\n\t\t\t\telse if (a.y > b.y) {\n\t\t\t\t\treturn -1;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\t\t\t})\n\n\t\t\t$array.each(labels, (l) => {\n\t\t\t\tconst bounds = l.label.adjustedLocalBounds();\n\t\t\t\tlet labelBottom = bounds.bottom;\n\t\t\t\tif (l.y + labelBottom > next) {\n\t\t\t\t\tl.y = next - labelBottom;\n\t\t\t\t}\n\t\t\t\tl.label.set(\"y\", l.y);\n\t\t\t\tnext = l.y + bounds.top;\n\t\t\t})\n\t\t}\n\t}\n\n\tprotected _arrangeRight(labels?: Array<{ label: Label, y: number }>) {\n\t\tif (labels) {\n\n\t\t\tlet next = 0;\n\n\t\t\tlabels.sort((a, b) => {\n\t\t\t\tif (a.y > b.y) {\n\t\t\t\t\treturn 1;\n\t\t\t\t}\n\t\t\t\telse if (a.y < b.y) {\n\t\t\t\t\treturn -1;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\t\t\t})\n\n\t\t\t$array.each(labels, (l) => {\n\t\t\t\tconst bounds = l.label.adjustedLocalBounds();\n\t\t\t\tlet labelLeft = bounds.left;\n\t\t\t\tif (l.y + labelLeft < next) {\n\t\t\t\t\tl.y = next - labelLeft;\n\t\t\t\t}\n\t\t\t\tl.label.set(\"x\", l.y);\n\n\t\t\t\tnext = l.y + bounds.right;\n\t\t\t})\n\t\t}\n\t}\n\n\tprotected _arrangeLeft(labels?: Array<{ label: Label, y: number }>) {\n\t\tif (labels) {\n\t\t\tlet next = this.labelsContainer.maxWidth();\n\n\t\t\tlabels.sort((a, b) => {\n\t\t\t\tif (a.y < b.y) {\n\t\t\t\t\treturn 1;\n\t\t\t\t}\n\t\t\t\telse if (a.y > b.y) {\n\t\t\t\t\treturn -1;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\t\t\t})\n\n\t\t\t$array.each(labels, (l) => {\n\t\t\t\tconst bounds = l.label.adjustedLocalBounds();\n\t\t\t\tlet labelRight = bounds.right;\n\t\t\t\tif (l.y + labelRight > next) {\n\t\t\t\t\tl.y = next - labelRight;\n\t\t\t\t}\n\t\t\t\tl.label.set(\"x\", l.y);\n\t\t\t\tnext = l.y + bounds.left;\n\t\t\t})\n\t\t}\n\t}\n\n\tpublic _updateSize() {\n\t\tsuper._updateSize();\n\t\tthis.markDirty();\n\t}\n\n\tprotected _updateTick(_dataItem: DataItem<this[\"_dataItemSettings\"]>) {\n\n\t}\n\n\tprotected _dispose() {\n\t\tsuper._dispose();\n\n\t\tconst chart = this.chart;\n\t\tif (chart) {\n\t\t\tchart.series.removeValue(this);\n\t\t}\n\t}\n\n\n}\n","import type { PieSeries } from \"./PieSeries\";\n\nimport { Percent } from \"../../core/util/Percent\";\nimport { PercentChart, IPercentChartPrivate, IPercentChartSettings } from \"../percent/PercentChart\";\nimport { p50 } from \"../../core/util/Percent\";\n\nimport * as $utils from \"../../core/util/Utils\";\nimport * as $math from \"../../core/util/Math\";\n\n\nexport interface IPieChartSettings extends IPercentChartSettings {\n\n\t/**\n\t * Outer radius of the pie chart.\n\t *\n\t * Can be set in fixed pixel value, or relative to chart container size in\n\t * percent.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/percent-charts/pie-chart/#Pie_radius} for more info\n\t * @default 80%\n\t */\n\tradius?: number | Percent;\n\n\t/**\n\t * Inner radius of the pie chart. Setting to any non-zero value will result\n\t * in a donut chart.\n\t *\n\t * Can be set in fixed pixel value, or relative to chart container size in\n\t * percent.\n\t *\n\t * Setting to negative number will mean pixels from outer radius.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/percent-charts/pie-chart/#Pie_radius} for more info\n\t */\n\tinnerRadius?: number | Percent;\n\n\t/**\n\t * A start angle of the chart in degrees.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/percent-charts/pie-chart/#Start_end_angles} for more info\n\t * @default -90\n\t */\n\tstartAngle?: number;\n\n\t/**\n\t * An end angle of the chart in degrees.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/percent-charts/pie-chart/#Start_end_angles} for more info\n\t * @default 270\n\t */\n\tendAngle?: number;\n\n}\n\nexport interface IPieChartPrivate extends IPercentChartPrivate {\n\n\t/**\n\t * @ignore\n\t */\n\tirModifyer?: number;\n\n}\n\n/**\n * Creates a pie chart.\n *\n * @see {@link https://www.amcharts.com/docs/v5/charts/percent-charts/pie-chart/} for more info\n * @important\n */\nexport class PieChart extends PercentChart {\n\n\tpublic static className: string = \"PieChart\";\n\tpublic static classNames: Array<string> = PercentChart.classNames.concat([PieChart.className]);\n\n\tdeclare public _settings: IPieChartSettings;\n\tdeclare public _privateSettings: IPieChartPrivate;\n\tdeclare public _seriesType: PieSeries;\n\n\tpublic _maxRadius: number = 1;\n\n\tprotected _afterNew() {\n\t\tsuper._afterNew();\n\t\tthis.seriesContainer.setAll({ x: p50, y: p50 });\n\t}\n\n\tpublic _prepareChildren() {\n\t\tsuper._prepareChildren();\n\n\t\tconst chartContainer = this.chartContainer;\n\t\tconst w = chartContainer.innerWidth();\n\t\tconst h = chartContainer.innerHeight();\n\n\t\tconst startAngle = this.get(\"startAngle\", 0);\n\t\tconst endAngle = this.get(\"endAngle\", 0);\n\t\tconst innerRadius = this.get(\"innerRadius\");\n\n\n\t\tlet bounds = $math.getArcBounds(0, 0, startAngle, endAngle, 1);\n\n\t\tconst wr = w / (bounds.right - bounds.left);\n\t\tconst hr = h / (bounds.bottom - bounds.top);\n\n\t\tlet innerBounds = { left: 0, right: 0, top: 0, bottom: 0 };\n\n\t\tif (innerRadius instanceof Percent) {\n\t\t\tlet value = innerRadius.value;\n\t\t\tlet mr = Math.min(wr, hr);\n\t\t\tvalue = Math.max(mr * value, mr - Math.min(h, w)) / mr;\n\t\t\tinnerBounds = $math.getArcBounds(0, 0, startAngle, endAngle, value);\n\t\t\tthis.setPrivateRaw(\"irModifyer\", value / innerRadius.value);\n\t\t}\n\n\t\tbounds = $math.mergeBounds([bounds, innerBounds]);\n\n\t\tconst prevRadius = this._maxRadius;\n\t\tthis._maxRadius = Math.min(wr, hr);\n\n\t\tconst radius = $utils.relativeToValue(this.get(\"radius\", 0), this._maxRadius);\n\t\tthis.seriesContainer.setAll({\n\t\t\tdy: -radius * (bounds.bottom + bounds.top) / 2, dx: -radius * (bounds.right + bounds.left) / 2\n\t\t})\n\n\t\tif (this.isDirty(\"startAngle\") || this.isDirty(\"endAngle\") || prevRadius != this._maxRadius) {\n\t\t\tthis.series.each((series) => {\n\t\t\t\tseries._markDirtyKey(\"startAngle\");\n\t\t\t})\n\t\t}\n\n\t\tif(this.isDirty(\"innerRadius\") || this.isDirty(\"radius\")){\n\t\t\tthis.series.each((series) => {\n\t\t\t\tseries._markDirtyKey(\"innerRadius\");\n\t\t\t})\t\t\t\n\t\t}\n\t}\n\n\t/**\n\t * Returns outer radius in pixels.\n\t *\n\t * If optional series parameter is passed in, it will return outer radius\n\t * of that particular series.\n\t *\n\t * @param   series  Series\n\t * @return          Radius in pixels\n\t */\n\tpublic radius(series?: PieSeries): number {\n\n\t\tlet radius = $utils.relativeToValue(this.get(\"radius\", 0), this._maxRadius);\n\t\tlet innerRadius = $utils.relativeToValue(this.get(\"innerRadius\", 0), radius);\n\n\t\tif (series) {\n\t\t\tlet index = this.series.indexOf(series);\n\t\t\tlet length = this.series.length;\n\n\t\t\tlet seriesRadius = series.get(\"radius\");\n\t\t\tif (seriesRadius != null) {\n\t\t\t\treturn innerRadius + $utils.relativeToValue(seriesRadius, radius - innerRadius);\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn innerRadius + (radius - innerRadius) / length * (index + 1);\n\t\t\t}\n\t\t}\n\t\treturn radius;\n\t}\n\n\t/**\n\t * Returns inner radius in pixels.\n\t *\n\t * If optional series parameter is passed in, it will return inner radius\n\t * of that particular series.\n\t *\n\t * @param   series  Series\n\t * @return          Radius in pixels\n\t */\n\tpublic innerRadius(series?: PieSeries): number {\n\t\tconst radius = this.radius();\n\t\tlet innerRadius = $utils.relativeToValue(this.get(\"innerRadius\", 0), radius);\n\n\t\tif (innerRadius < 0) {\n\t\t\tinnerRadius = radius + innerRadius;\n\t\t}\n\n\t\tif (series) {\n\t\t\tlet index = this.series.indexOf(series);\n\t\t\tlet length = this.series.length;\n\n\t\t\tlet seriesInnerRadius = series.get(\"innerRadius\");\n\t\t\tif (seriesInnerRadius != null) {\n\t\t\t\treturn innerRadius + $utils.relativeToValue(seriesInnerRadius, radius - innerRadius);\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn innerRadius + (radius - innerRadius) / length * index;\n\t\t\t}\n\t\t}\n\t\treturn innerRadius;\n\t}\n}\n","import type { DataItem } from \"../../core/render/Component\";\nimport type { PieChart } from \"./PieChart\";\n\nimport { PercentSeries, IPercentSeriesSettings, IPercentSeriesDataItem, IPercentSeriesPrivate } from \"../percent/PercentSeries\";\nimport { Template } from \"../../core/util/Template\";\nimport { Slice } from \"../../core/render/Slice\";\nimport { Tick } from \"../../core/render/Tick\";\nimport { RadialLabel } from \"../../core/render/RadialLabel\";\nimport { ListTemplate } from \"../../core/util/List\";\nimport { p100, Percent } from \"../../core/util/Percent\";\nimport type { Bullet } from \"../../core/render/Bullet\";\n\nimport * as $array from \"../../core/util/Array\";\nimport * as $math from \"../../core/util/Math\";\nimport * as $utils from \"../../core/util/Utils\";\n\nexport interface IPieSeriesDataItem extends IPercentSeriesDataItem {\n\tslice: Slice;\n\tlabel: RadialLabel;\n}\n\nexport interface IPieSeriesSettings extends IPercentSeriesSettings {\n\n\t/**\n\t * Radius of the series in pixels or percent.\n\t */\n\tradius?: Percent | number;\n\n\t/**\n\t * Radius of the series in pixels or percent.\n\t *\n\t * Setting to negative number will mean pixels from outer radius.\n\t */\n\tinnerRadius?: Percent | number;\n\n\t/**\n\t * Start angle of the series in degrees.\n\t *\n\t * @default -90\n\t */\n\tstartAngle?: number;\n\n\t/**\n\t * End angle of the series in degrees.\n\t *\n\t * @default 270\n\t */\n\tendAngle?: number;\n\n}\n\nexport interface IPieSeriesPrivate extends IPercentSeriesPrivate {\n\n\t/**\n\t * Actual radius of the series in pixels.\n\t */\n\tradius?: number;\n\n}\n\n/**\n * Creates a series for a [[PieChart]].\n *\n * @see {@link https://www.amcharts.com/docs/v5/charts/percent-charts/pie-chart/} for more info\n * @important\n */\nexport class PieSeries extends PercentSeries {\n\n\tdeclare public chart: PieChart | undefined;\n\n\tpublic static className: string = \"PieSeries\";\n\tpublic static classNames: Array<string> = PercentSeries.classNames.concat([PieSeries.className]);\n\n\tdeclare public _settings: IPieSeriesSettings;\n\tdeclare public _privateSettings: IPieSeriesPrivate;\n\tdeclare public _dataItemSettings: IPieSeriesDataItem;\n\n\tdeclare public _sliceType: Slice;\n\tdeclare public _labelType: RadialLabel;\n\n\tprotected _makeSlices(): ListTemplate<this[\"_sliceType\"]> {\n\t\treturn new ListTemplate(\n\t\t\tTemplate.new({}),\n\t\t\t() => Slice._new(this._root, {\n\t\t\t\tthemeTags: $utils.mergeTags(this.slices.template.get(\"themeTags\", []), [\"pie\", \"series\"])\n\t\t\t}, [this.slices.template]),\n\t\t);\n\t}\n\n\tprotected _makeLabels(): ListTemplate<this[\"_labelType\"]> {\n\t\treturn new ListTemplate(\n\t\t\tTemplate.new({}),\n\t\t\t() => RadialLabel._new(this._root, {\n\t\t\t\tthemeTags: $utils.mergeTags(this.labels.template.get(\"themeTags\", []), [\"pie\", \"series\"])\n\t\t\t}, [this.labels.template]),\n\t\t);\n\t}\n\n\tprotected _makeTicks(): ListTemplate<this[\"_tickType\"]> {\n\t\treturn new ListTemplate(\n\t\t\tTemplate.new({}),\n\t\t\t() => Tick._new(this._root, {\n\t\t\t\tthemeTags: $utils.mergeTags(this.ticks.template.get(\"themeTags\", []), [\"pie\", \"series\"])\n\t\t\t}, [this.ticks.template]),\n\t\t);\n\t}\n\n\tprotected processDataItem(dataItem: DataItem<this[\"_dataItemSettings\"]>) {\n\t\tsuper.processDataItem(dataItem);\n\n\t\tconst slice = this.makeSlice(dataItem);\n\n\t\tslice.on(\"scale\", () => {\n\t\t\tthis._updateTick(dataItem);\n\t\t})\n\t\tslice.on(\"shiftRadius\", () => {\n\t\t\tthis._updateTick(dataItem);\n\t\t})\n\t\tslice.events.on(\"positionchanged\", () => {\n\t\t\tthis._updateTick(dataItem);\n\t\t})\n\n\t\tconst label = this.makeLabel(dataItem);\n\n\t\tlabel.events.on(\"positionchanged\", () => {\n\t\t\tthis._updateTick(dataItem);\n\t\t})\n\n\t\tthis.makeTick(dataItem);\n\n\t\tslice.events.on(\"positionchanged\", () => {\n\t\t\tlabel.markDirty();\n\t\t})\n\t}\n\n\tprotected _getNextUp() {\n\t\tconst chart = this.chart;\n\t\tif (chart) {\n\t\t\treturn chart._maxRadius;\n\t\t}\n\t\treturn this.labelsContainer.maxHeight() / 2;\n\t}\n\n\tprotected _getNextDown() {\n\t\tconst chart = this.chart;\n\t\tif (chart) {\n\t\t\treturn -chart._maxRadius;\n\t\t}\n\t\treturn -this.labelsContainer.maxHeight() / 2;\n\n\t}\n\n\tpublic _prepareChildren() {\n\t\tsuper._prepareChildren();\n\t\tconst chart = this.chart;\n\t\tif (chart) {\n\n\t\t\tif (this.isDirty(\"alignLabels\")) {\n\t\t\t\tlet labelsTemplate = this.labels.template;\n\n\t\t\t\tif (this.get(\"alignLabels\")) {\n\t\t\t\t\tlabelsTemplate.set(\"textType\", \"aligned\");\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tlet textType = labelsTemplate.get(\"textType\");\n\t\t\t\t\tif (textType == null || textType == \"aligned\") {\n\t\t\t\t\t\tlabelsTemplate.set(\"textType\", \"adjusted\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\n\t\t\tif (this._valuesDirty || this.isDirty(\"radius\") || this.isDirty(\"innerRadius\") || this.isDirty(\"startAngle\") || this.isDirty(\"endAngle\") || this.isDirty(\"alignLabels\")) {\n\t\t\t\tthis.markDirtyBounds();\n\t\t\t\tconst startAngle = this.get(\"startAngle\", chart.get(\"startAngle\", -90));\n\t\t\t\tconst endAngle = this.get(\"endAngle\", chart.get(\"endAngle\", 270));\n\t\t\t\tconst arc = endAngle - startAngle;\n\t\t\t\tlet currentAngle = startAngle;\n\n\t\t\t\tconst radius = chart.radius(this);\n\t\t\t\tthis.setPrivateRaw(\"radius\", radius);\n\t\t\t\tlet innerRadius = chart.innerRadius(this) * chart.getPrivate(\"irModifyer\", 1);\n\n\t\t\t\tif (innerRadius < 0) {\n\t\t\t\t\tinnerRadius = radius + innerRadius;\n\t\t\t\t}\n\n\t\t\t\t//if (radius > 0) {\n\t\t\t\t$array.each(this._dataItems, (dataItem) => {\n\n\t\t\t\t\tthis.updateLegendValue(dataItem);\n\n\t\t\t\t\tlet currentArc = arc * dataItem.get(\"valuePercentTotal\") / 100;\n\t\t\t\t\tconst slice = dataItem.get(\"slice\");\n\t\t\t\t\tif (slice) {\n\t\t\t\t\t\tslice.set(\"radius\", radius);\n\t\t\t\t\t\tslice.set(\"innerRadius\", innerRadius);\n\t\t\t\t\t\tslice.set(\"startAngle\", currentAngle);\n\n\t\t\t\t\t\tslice.set(\"arc\", currentArc);\n\n\t\t\t\t\t\tconst color = dataItem.get(\"fill\");\n\t\t\t\t\t\tslice._setDefault(\"fill\", color);\n\t\t\t\t\t\tslice._setDefault(\"stroke\", color);\n\t\t\t\t\t}\n\n\t\t\t\t\tlet middleAngle = $math.normalizeAngle(currentAngle + currentArc / 2);\n\n\t\t\t\t\tconst label = dataItem.get(\"label\");\n\t\t\t\t\tif (label) {\n\t\t\t\t\t\tlabel.setPrivate(\"radius\", radius);\n\t\t\t\t\t\tlabel.setPrivate(\"innerRadius\", innerRadius);\n\t\t\t\t\t\tlabel.set(\"labelAngle\", middleAngle);\n\n\t\t\t\t\t\tif (label.get(\"textType\") == \"aligned\") {\n\t\t\t\t\t\t\tlet labelRadius = radius + label.get(\"radius\", 0);\n\t\t\t\t\t\t\tlet y = radius * $math.sin(middleAngle);\n\n\t\t\t\t\t\t\tif (middleAngle > 90 && middleAngle <= 270) {\n\t\t\t\t\t\t\t\tif (!label.isHidden() && !label.isHiding()) {\n\t\t\t\t\t\t\t\t\tthis._lLabels.push({ label: label, y: y });\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tlabelRadius *= -1;\n\t\t\t\t\t\t\t\tlabelRadius -= this.labelsContainer.get(\"paddingLeft\", 0);\n\t\t\t\t\t\t\t\tlabel.set(\"centerX\", p100);\n\t\t\t\t\t\t\t\tlabel.setPrivateRaw(\"left\", true);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\tif (!label.isHidden() && !label.isHiding()) {\n\t\t\t\t\t\t\t\t\tthis._rLabels.push({ label: label, y: y });\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tlabelRadius += this.labelsContainer.get(\"paddingRight\", 0);\n\t\t\t\t\t\t\t\tlabel.set(\"centerX\", 0);\n\t\t\t\t\t\t\t\tlabel.setPrivateRaw(\"left\", false);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tlabel.set(\"x\", labelRadius);\n\t\t\t\t\t\t\tlabel.set(\"y\", radius * $math.sin(middleAngle));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcurrentAngle += currentArc;\n\t\t\t\t\tthis._updateTick(dataItem);\n\t\t\t\t})\n\t\t\t\t//}\n\t\t\t}\n\t\t}\n\t}\n\n\tprotected _updateTick(dataItem: DataItem<this[\"_dataItemSettings\"]>) {\n\t\tconst tick = dataItem.get(\"tick\");\n\t\tconst label = dataItem.get(\"label\");\n\t\tconst slice = dataItem.get(\"slice\");\n\t\tconst location = tick.get(\"location\", 1);\n\t\tif (tick && label && slice) {\n\t\t\tconst radius = (slice.get(\"shiftRadius\", 0) + slice.get(\"radius\", 0)) * slice.get(\"scale\", 1) * location;\n\t\t\tconst labelAngle = label.get(\"labelAngle\", 0);\n\t\t\tconst cos = $math.cos(labelAngle);\n\t\t\tconst sin = $math.sin(labelAngle);\n\n\t\t\tconst labelsContainer = this.labelsContainer;\n\t\t\tconst pl = labelsContainer.get(\"paddingLeft\", 0);\n\t\t\tconst pr = labelsContainer.get(\"paddingRight\", 0);\n\n\t\t\tlet x = 0;\n\t\t\tlet y = 0;\n\n\t\t\tx = label.x();\n\t\t\ty = label.y();\n\n\t\t\tif (label.get(\"textType\") == \"circular\") {\n\t\t\t\tconst labelRadius = label.radius() - label.get(\"paddingBottom\", 0);\n\t\t\t\tconst labelAngle = label.get(\"labelAngle\", 0);\n\t\t\t\tx = labelRadius * $math.cos(labelAngle);\n\t\t\t\ty = labelRadius * $math.sin(labelAngle);\n\t\t\t}\n\n\t\t\tlet dx = -pr;\n\t\t\tif (label.getPrivate(\"left\")) {\n\t\t\t\tdx = pl;\n\t\t\t}\n\n\t\t\ttick.set(\"points\", [{ x: slice.x() + radius * cos, y: slice.y() + radius * sin }, { x: x + dx, y: y }, { x: x, y: y }]);\n\t\t}\n\t}\n\n\tpublic _positionBullet(bullet: Bullet) {\n\n\t\tconst sprite = bullet.get(\"sprite\");\n\t\tif (sprite) {\n\t\t\tconst dataItem = sprite.dataItem as DataItem<this[\"_dataItemSettings\"]>;\n\t\t\tconst slice = dataItem.get(\"slice\");\n\n\t\t\tif (slice) {\n\t\t\t\tconst innerRadius = slice.get(\"innerRadius\", 0);\n\t\t\t\tconst radius = slice.get(\"radius\", 0);\n\t\t\t\tconst startAngle = slice.get(\"startAngle\", 0);\n\t\t\t\tconst arc = slice.get(\"arc\", 0);\n\t\t\t\tconst locationX = bullet.get(\"locationX\", 0.5);\n\t\t\t\tconst locationY = bullet.get(\"locationY\", 0.5);\n\n\t\t\t\tconst angle = startAngle + arc * locationX;\n\t\t\t\tconst r = innerRadius + (radius - innerRadius) * locationY;\n\n\t\t\t\tsprite.setAll({ x: $math.cos(angle) * r, y: $math.sin(angle) * r });\n\t\t\t}\n\t\t}\n\t}\n}\n","import { Graphics, IGraphicsSettings, IGraphicsPrivate } from \"../../core/render/Graphics\";\nimport type { IPoint } from \"../../core/util/IPoint\";\n\nexport interface IFunnelSliceSettings extends IGraphicsSettings {\n\n\t/**\n\t * Top width in pixels.\n\t */\n\ttopWidth?: number;\n\n\t/**\n\t * Bottom width in pixels.\n\t */\n\tbottomWidth?: number;\n\n\t/**\n\t * Orientation.\n\t */\n\torientation?: \"vertical\" | \"horizontal\";\n\n\t/**\n\t * A distance in pixels the slice should \"puff up\".\n\t *\n\t * Any non-zero value will make sides of the slide curved.\n\t */\n\texpandDistance?: number;\n\n}\n\nexport interface IFunnelSlicePrivate extends IGraphicsPrivate {\n}\n\n/**\n * Draws a slice for [[FunnelSeries]].\n */\nexport class FunnelSlice extends Graphics {\n\tdeclare public _settings: IFunnelSliceSettings;\n\tdeclare public _privateSettings: IFunnelSlicePrivate;\n\n\tpublic static className: string = \"FunnelSlice\";\n\tpublic static classNames: Array<string> = Graphics.classNames.concat([FunnelSlice.className]);\n\tprotected _projectionDirty: boolean = false;\n\n\tprotected _tlx: number = 0;\n\tprotected _tly: number = 0;\n\n\tprotected _trx: number = 0;\n\tprotected _try: number = 0;\n\n\tprotected _blx: number = 0;\n\tprotected _bly: number = 0;\n\n\tprotected _brx: number = 0;\n\tprotected _bry: number = 0;\n\n\tprotected _cprx: number = 0;\n\tprotected _cplx: number = 0;\n\tprotected _cpry: number = 0;\n\tprotected _cply: number = 0;\n\n\tprotected _afterNew() {\n\t\tsuper._afterNew();\n\t\tthis.set(\"draw\", (display) => {\n\t\t\tdisplay.moveTo(this._tlx, this._tly);\n\t\t\tdisplay.lineTo(this._trx, this._try);\n\t\t\tdisplay.quadraticCurveTo(this._cprx, this._cpry, this._brx, this._bry);\n\t\t\tdisplay.lineTo(this._blx, this._bly);\n\t\t\tdisplay.quadraticCurveTo(this._cplx, this._cply, this._tlx, this._tly);\n\t\t})\n\t}\n\n\tpublic getPoint(locationX: number, locationY: number): IPoint {\n\t\tlet w = this.width();\n\t\tlet h = this.height();\n\n\t\tconst tw = this.get(\"topWidth\", 0);\n\t\tconst bw = this.get(\"bottomWidth\", 0);\n\n\t\tif (this.get(\"orientation\") == \"vertical\") {\n\t\t\tlet tlx = -tw / 2;\n\t\t\tlet trx = tw / 2;\n\n\t\t\tlet brx = bw / 2;\n\t\t\tlet blx = - bw / 2;\n\n\t\t\tlet mlx = tlx + (blx - tlx) * locationY;\n\t\t\tlet mrx = trx + (brx - trx) * locationY;\n\n\t\t\treturn { x: mlx + (mrx - mlx) * locationX, y: h * locationY };\n\t\t}\n\t\telse {\n\t\t\tlet tlx = -tw / 2;\n\t\t\tlet trx = tw / 2;\n\n\t\t\tlet brx = bw / 2;\n\t\t\tlet blx = - bw / 2;\n\n\t\t\tlet mlx = tlx + (blx - tlx) * locationX;\n\t\t\tlet mrx = trx + (brx - trx) * locationX;\n\n\t\t\treturn { x: w * locationX, y: mlx + (mrx - mlx) * locationY};\n\t\t}\n\n\t}\n\n\tpublic _changed() {\n\n\t\tif (this.isDirty(\"topWidth\") || this.isDirty(\"bottomWidth\") || this.isDirty(\"expandDistance\") || this.isDirty(\"orientation\") || this.isDirty(\"width\") || this.isDirty(\"height\")) {\n\t\t\tconst w = this.width();\n\t\t\tconst h = this.height();\n\t\t\tconst tw = this.get(\"topWidth\", 0);\n\t\t\tconst bw = this.get(\"bottomWidth\", 0);\n\t\t\tthis._clear = true;\n\n\t\t\tlet ed = this.get(\"expandDistance\", 0);\n\n\t\t\tif (this.get(\"orientation\") == \"vertical\") {\n\t\t\t\tthis._tlx = -tw / 2;\n\t\t\t\tthis._tly = 0;\n\n\t\t\t\tthis._trx = tw / 2;\n\t\t\t\tthis._try = 0;\n\n\t\t\t\tthis._brx = bw / 2;\n\t\t\t\tthis._bry = h;\n\n\t\t\t\tthis._blx = -bw / 2;\n\t\t\t\tthis._bly = h;\n\n\t\t\t\tthis._cprx = this._trx + (this._brx - this._trx) / 2 + ed * h,\n\t\t\t\tthis._cpry = this._try + 0.5 * h;\n\n\t\t\t\tthis._cplx = this._tlx + (this._blx - this._tlx) / 2 - ed * h;\n\t\t\t\tthis._cply = this._tly + 0.5 * h;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis._tly = -tw / 2;\n\t\t\t\tthis._tlx = 0;\n\n\t\t\t\tthis._try = tw / 2;\n\t\t\t\tthis._trx = 0;\n\n\t\t\t\tthis._bry = bw / 2;\n\t\t\t\tthis._brx = w;\n\n\t\t\t\tthis._bly = -bw / 2;\n\t\t\t\tthis._blx = w;\n\n\t\t\t\tthis._cpry = this._try + (this._bry - this._try) / 2 + ed * w,\n\t\t\t\tthis._cprx = this._trx + 0.5 * w;\n\n\t\t\t\tthis._cply = this._tly + (this._bly - this._tly) / 2 - ed * w;\n\t\t\t\tthis._cplx = this._tlx + 0.5 * w;\n\t\t\t}\n\t\t}\n\t\tsuper._changed();\n\t}\n}\n","import type { DataItem } from \"../../core/render/Component\";\nimport type { SlicedChart } from \"./SlicedChart\";\n\nimport { PercentSeries, IPercentSeriesSettings, IPercentSeriesDataItem, IPercentSeriesPrivate } from \"../percent/PercentSeries\";\nimport { Template } from \"../../core/util/Template\";\nimport { ListTemplate } from \"../../core/util/List\";\nimport { FunnelSlice } from \"./FunnelSlice\";\nimport { Tick } from \"../../core/render/Tick\";\nimport { Label } from \"../../core/render/Label\";\nimport { percent, p50, p100 } from \"../../core/util/Percent\";\nimport type { Bullet } from \"../../core/render/Bullet\";\n\nimport * as $array from \"../../core/util/Array\";\nimport * as $type from \"../../core/util/Type\";\nimport * as $utils from \"../../core/util/Utils\";\n\n\nexport interface IFunnelSeriesDataItem extends IPercentSeriesDataItem {\n\n\t/**\n\t * A related slice element.\n\t */\n\tslice: FunnelSlice;\n\n\t/**\n\t * A related slice link element\n\t */\n\tlink: FunnelSlice;\n\n\t/**\n\t * Data item's index.\n\t */\n\tindex: number;\n\n}\n\nexport interface IFunnelSeriesSettings extends IPercentSeriesSettings {\n\n\t/**\n\t * Width of the bottom edge of the slice relative to the top edge of the next\n\t * slice.\n\t *\n\t * `1` - means the full width of the slice, resulting in a rectangle.\n\t * `0` - means using width of the next slice, resulting in a trapezoid.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/percent-charts/sliced-chart/funnel-series/#Slice_bottom_width} for more info\n\t * @default 1\n\t */\n\tbottomRatio?: number;\n\n\t/**\n\t * Orientation of the series.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/percent-charts/sliced-chart/#Series_orientation} for more info\n\t * @default \"vertical\"\n\t */\n\torientation: \"horizontal\" | \"vertical\";\n\n\t/**\n\t * If set to `true`, series will not create slices for data items with zero\n\t * value.\n\t */\n\tignoreZeroValues?: boolean;\n\n\t/**\n\t * Should labels be aligned into columns/rows?\n\t *\n\t * @default false\n\t */\n\talignLabels?: boolean;\n\n\t/**\n\t * Relative location within area available to series where it should start.\n\t *\n\t * `0` - beginning, `1` - end, or any intermediate value.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/percent-charts/sliced-chart/funnel-series/#Start_end_locations} for more info\n\t * @default 0\n\t */\n\tstartLocation?: number;\n\n\t/**\n\t * Relative location within area available to series where it should start.\n\t *\n\t * `0` - beginning, `1` - end, or any intermediate value.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/percent-charts/sliced-chart/funnel-series/#Start_end_locations} for more info\n\t * @default 0\n\t */\n\tendLocation?: number;\n\n}\n\nexport interface IFunnelSeriesPrivate extends IPercentSeriesPrivate {\n}\n\n/**\n * Creates a funnel series for use in a [[SlicedChart]].\n *\n * @see {@link https://www.amcharts.com/docs/v5/charts/percent-charts/sliced-chart/funnel-series/} for more info\n * @important\n */\nexport class FunnelSeries extends PercentSeries {\n\n\t/**\n\t * A chart series is attached to.\n\t */\n\tdeclare public chart: SlicedChart | undefined;\n\n\tprotected _tag = \"funnel\";\n\n\tdeclare public _sliceType: FunnelSlice;\n\tdeclare public _labelType: Label;\n\tdeclare public _tickType: Tick;\n\n\tprotected _makeSlices(): ListTemplate<this[\"_sliceType\"]> {\n\t\treturn new ListTemplate(\n\t\t\tTemplate.new({}),\n\t\t\t() => FunnelSlice._new(this._root, {\n\t\t\t\tthemeTags: $utils.mergeTags(this.slices.template.get(\"themeTags\", []), [this._tag, \"series\", \"slice\", this.get(\"orientation\")])\n\t\t\t}, [this.slices.template])\n\t\t);\n\t}\n\n\tprotected _makeLabels(): ListTemplate<this[\"_labelType\"]> {\n\t\treturn new ListTemplate(\n\t\t\tTemplate.new({}),\n\t\t\t() => Label._new(this._root, {\n\t\t\t\tthemeTags: $utils.mergeTags(this.labels.template.get(\"themeTags\", []), [this._tag, \"series\", \"label\", this.get(\"orientation\")])\n\t\t\t}, [this.labels.template])\n\t\t);\n\t}\n\n\tprotected _makeTicks(): ListTemplate<this[\"_tickType\"]> {\n\t\treturn new ListTemplate(\n\t\t\tTemplate.new({}),\n\t\t\t() => Tick._new(this._root, {\n\t\t\t\tthemeTags: $utils.mergeTags(this.ticks.template.get(\"themeTags\", []), [this._tag, \"series\", \"tick\", this.get(\"orientation\")])\n\t\t\t}, [this.ticks.template])\n\t\t);\n\t}\n\n\t/**\n\t * A [[ListTemplate]] of all slice links in series.\n\t *\n\t * `links.template` can also be used to configure slice links.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/percent-charts/sliced-chart/funnel-series/#Slice_links} for more info\n\t */\n\tpublic readonly links: ListTemplate<this[\"_sliceType\"]> = this._makeLinks();\n\n\tprotected _makeLinks(): ListTemplate<this[\"_sliceType\"]> {\n\t\treturn new ListTemplate(\n\t\t\tTemplate.new({}),\n\t\t\t() => FunnelSlice._new(this._root, {\n\t\t\t\tthemeTags: $utils.mergeTags(this.links.template.get(\"themeTags\", []), [this._tag, \"series\", \"link\", this.get(\"orientation\")])\n\t\t\t}, [this.links.template]),\n\t\t);\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic makeLink(dataItem: DataItem<this[\"_dataItemSettings\"]>): this[\"_sliceType\"] {\n\t\tconst link = this.slicesContainer.children.push(this.links.make());\n\t\tlink._setDataItem(dataItem);\n\t\tdataItem.set(\"link\", link);\n\t\tthis.links.push(link);\n\t\treturn link;\n\t}\n\n\tpublic static className: string = \"FunnelSeries\";\n\tpublic static classNames: Array<string> = PercentSeries.classNames.concat([FunnelSeries.className]);\n\n\tdeclare public _settings: IFunnelSeriesSettings;\n\tdeclare public _privateSettings: IFunnelSeriesPrivate;\n\tdeclare public _dataItemSettings: IFunnelSeriesDataItem;\n\n\tprotected _total: number = 0;\n\tprotected _count: number = 0;\n\tprotected _nextCoord: number = 0;\n\n\tprotected _opposite: boolean = false;\n\n\tprotected _afterNew() {\n\t\tsuper._afterNew();\n\t\tconst slicesContainer = this.slicesContainer;\n\t\tslicesContainer.setAll({ isMeasured: true, position: \"relative\", width: percent(100), height: percent(100) });\n\t\tslicesContainer.onPrivate(\"width\", () => {\n\t\t\tthis.markDirtySize();\n\t\t})\n\n\t\tslicesContainer.onPrivate(\"height\", () => {\n\t\t\tthis.markDirtySize();\n\t\t})\n\n\t\tif (this.get(\"orientation\") == \"vertical\") {\n\t\t\tthis.set(\"layout\", this._root.horizontalLayout);\n\t\t}\n\t\telse {\n\t\t\tthis.set(\"layout\", this._root.verticalLayout);\n\t\t}\n\t}\n\n\tprotected processDataItem(dataItem: DataItem<this[\"_dataItemSettings\"]>) {\n\t\tsuper.processDataItem(dataItem);\n\n\t\tconst slice = this.makeSlice(dataItem);\n\n\t\tslice._setDataItem(dataItem);\n\n\t\tdataItem.set(\"slice\", slice);\n\n\t\tthis.makeLink(dataItem);\n\t\tconst label = this.makeLabel(dataItem);\n\n\t\tlabel.on(\"x\", () => {\n\t\t\tthis._updateTick(dataItem);\n\t\t})\n\n\t\tlabel.on(\"y\", () => {\n\t\t\tthis._updateTick(dataItem);\n\t\t})\n\n\t\tthis.makeTick(dataItem);\n\n\t\tslice.events.on(\"positionchanged\", () => {\n\t\t\tlabel.markDirty();\n\t\t})\n\n\t\tslice.events.on(\"boundschanged\", () => {\n\t\t\tconst dataItem = slice.dataItem;\n\t\t\tif (dataItem) {\n\t\t\t\tthis._updateTick(dataItem as any);\n\t\t\t}\n\t\t})\n\t}\n\n\n\tpublic _updateChildren() {\n\t\tthis._opposite = false;\n\t\tif (this.children.indexOf(this.labelsContainer) == 0) {\n\t\t\tthis._opposite = true;\n\t\t}\n\n\t\tlet total = 0;\n\t\tlet count = 0;\n\n\t\t$array.each(this.dataItems, (dataItem) => {\n\t\t\tconst value = dataItem.get(\"value\");\n\t\t\tif ($type.isNumber(value)) {\n\t\t\t\tcount++;\n\t\t\t\tif (value > 0) {\n\t\t\t\t\ttotal += Math.abs(dataItem.get(\"valueWorking\", value) / value);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tif (this.get(\"ignoreZeroValues\", false)) {\n\t\t\t\t\t\tcount--;\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tif (dataItem.isHidden()) {\n\t\t\t\t\t\t\tcount--;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\ttotal += 1;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\n\t\tthis._total = 1 / count * total;\n\t\tthis._count = count;\n\n\t\tif (this.isDirty(\"alignLabels\")) {\n\t\t\tthis._fixLayout();\n\t\t}\n\n\t\tif (this._total > 0 && (this._valuesDirty || this._sizeDirty)) {\n\n\t\t\tconst slicesContainer = this.slicesContainer;\n\n\t\t\tlet h: number;\n\t\t\tif (this.get(\"orientation\") == \"vertical\") {\n\t\t\t\th = slicesContainer.innerHeight();\n\t\t\t}\n\t\t\telse {\n\t\t\t\th = slicesContainer.innerWidth();\n\t\t\t}\n\n\t\t\tthis._nextCoord = this.get(\"startLocation\", 0) * h;\n\n\t\t\tthis.markDirtyBounds();\n\n\t\t\tlet i = 0;\n\t\t\t$array.each(this._dataItems, (dataItem) => {\n\t\t\t\tthis.updateLegendValue(dataItem);\n\n\t\t\t\tdataItem.set(\"index\", i);\n\t\t\t\ti++;\n\n\t\t\t\tconst slice = dataItem.get(\"slice\");\n\t\t\t\tconst tick = dataItem.get(\"tick\");\n\t\t\t\tconst label = dataItem.get(\"label\");\n\t\t\t\tconst link = dataItem.get(\"link\");\n\t\t\t\tconst color = dataItem.get(\"fill\");\n\n\t\t\t\tslice._setDefault(\"fill\", color);\n\t\t\t\tslice._setDefault(\"stroke\", color);\n\t\t\t\tlink._setDefault(\"fill\", color);\n\t\t\t\tlink._setDefault(\"stroke\", color);\n\n\t\t\t\tconst value = dataItem.get(\"value\");\n\t\t\t\tif ($type.isNumber(value)) {\n\t\t\t\t\tif (value == 0 && this.get(\"ignoreZeroValues\")) {\n\t\t\t\t\t\tslice.setPrivate(\"visible\", false);\n\t\t\t\t\t\ttick.setPrivate(\"visible\", false);\n\t\t\t\t\t\tlabel.setPrivate(\"visible\", false);\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tslice.setPrivate(\"visible\", true);\n\t\t\t\t\t\ttick.setPrivate(\"visible\", true);\n\t\t\t\t\t\tlabel.setPrivate(\"visible\", true);\n\n\t\t\t\t\t\tthis.decorateSlice(dataItem);\n\n\t\t\t\t\t\tif (this.isLast(dataItem)) {\n\t\t\t\t\t\t\tlink.setPrivate(\"visible\", false);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (!dataItem.isHidden()) {\n\t\t\t\t\t\t\tlink.setPrivate(\"visible\", true);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})\n\t\t}\n\t\tsuper._updateChildren();\n\t}\n\n\tprotected _fixLayout() {\n\n\t\tconst orientation = this.get(\"orientation\");\n\t\tconst labelsContainer = this.labelsContainer;\n\t\tconst labelsTemplate = this.labels.template;\n\n\t\tif (this.get(\"alignLabels\")) {\n\t\t\tlabelsContainer.set(\"position\", \"relative\");\n\t\t\tlabelsContainer.setAll({ isMeasured: true });\n\t\t\tif (orientation == \"vertical\") {\n\t\t\t\tthis.set(\"layout\", this._root.horizontalLayout);\n\t\t\t\tlabelsTemplate.setAll({ centerX: p100, x: p100 });\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.set(\"layout\", this._root.verticalLayout);\n\t\t\t\tlabelsTemplate.setAll({ centerX: 0, x: 0 });\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tlabelsContainer.setAll({ isMeasured: false, position: \"absolute\" });\n\t\t\tif (orientation == \"vertical\") {\n\t\t\t\tlabelsContainer.setAll({ x: p50 });\n\t\t\t\tlabelsTemplate.setAll({ centerX: p50, x: 0 });\n\t\t\t}\n\t\t\telse {\n\t\t\t\tlabelsContainer.setAll({ y: p50 });\n\t\t\t\tlabelsTemplate.setAll({ centerX: p50, y: 0 });\n\t\t\t}\n\t\t}\n\t\tthis.markDirtySize();\n\t}\n\n\tprotected getNextValue(dataItem: DataItem<this[\"_dataItemSettings\"]>): number {\n\t\tlet index = dataItem.get(\"index\");\n\t\tlet nextValue = dataItem.get(\"valueWorking\", 0);\n\t\tif (index < this.dataItems.length - 1) {\n\t\t\tlet nextItem = this.dataItems[index + 1];\n\t\t\tnextValue = nextItem.get(\"valueWorking\", 0);\n\n\t\t\tif (nextItem.isHidden() || (nextItem.get(\"value\") == 0 && this.get(\"ignoreZeroValues\"))) {\n\t\t\t\treturn this.getNextValue(nextItem);\n\t\t\t}\n\t\t}\n\t\treturn nextValue;\n\t}\n\n\tprotected isLast(dataItem: DataItem<this[\"_dataItemSettings\"]>): boolean {\n\t\tlet index = dataItem.get(\"index\");\n\t\tif (index == this.dataItems.length - 1) {\n\t\t\treturn true;\n\t\t}\n\t\telse {\n\t\t\tfor (let i = index + 1; i < this.dataItems.length; i++) {\n\t\t\t\tif (!this.dataItems[i].isHidden()) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\tprotected decorateSlice(dataItem: DataItem<this[\"_dataItemSettings\"]>) {\n\t\tconst orientation = this.get(\"orientation\");\n\n\t\tconst slice = dataItem.get(\"slice\");\n\t\tconst label = dataItem.get(\"label\");\n\t\tconst link = dataItem.get(\"link\");\n\n\t\tconst slicesContainer = this.slicesContainer;\n\n\t\tlet maxWidth = slicesContainer.innerWidth();\n\t\tlet maxHeight = slicesContainer.innerHeight();\n\n\t\tlet maxSize = maxWidth;\n\t\tif (orientation == \"horizontal\") {\n\t\t\tmaxSize = maxHeight;\n\t\t}\n\n\t\tconst nextValue = this.getNextValue(dataItem);\n\t\tconst value = dataItem.get(\"value\", 0);\n\t\tconst workingValue = Math.abs(dataItem.get(\"valueWorking\", value));\n\t\tconst bottomRatio = this.get(\"bottomRatio\", 0);\n\t\tconst valueHigh = this.getPrivate(\"valueHigh\", 0);\n\n\n\t\tlet d = 1;\n\t\tif (value != 0) {\n\t\t\td = workingValue / Math.abs(value);\n\t\t}\n\t\telse {\n\t\t\tif (dataItem.isHidden()) {\n\t\t\t\td = 0.000001;\n\t\t\t}\n\t\t}\n\n\t\tif (this._nextCoord == Infinity) {\n\t\t\tthis._nextCoord = 0;\n\t\t}\n\n\t\tlet topWidth = workingValue / valueHigh * maxSize;\n\t\tlet bottomWidth = (workingValue - (workingValue - nextValue) * bottomRatio) / valueHigh * maxSize;\n\n\t\tslice.setAll({ topWidth, bottomWidth, orientation });\n\t\tlink.setAll({ topWidth: bottomWidth, bottomWidth: (workingValue - (workingValue - nextValue)) / valueHigh * maxSize, orientation });\n\n\t\tconst startLocation = this.get(\"startLocation\", 0);\n\t\tconst endLocation = this.get(\"endLocation\", 1);\n\n\t\tif (orientation == \"vertical\") {\n\n\t\t\tlet linkHeight = link.height() * d;\n\n\t\t\tmaxHeight = maxHeight * (endLocation - startLocation) + linkHeight;\n\n\t\t\tslice.set(\"y\", this._nextCoord);\n\n\t\t\tlet height = Math.min(100000, Math.max(0, maxHeight / this._count * d / this._total - linkHeight));\n\n\t\t\tslice.setAll({ height, x: maxWidth / 2 });\n\t\t\tlet labelY = this._nextCoord + height / 2;\n\t\t\tlabel.set(\"y\", labelY);\n\n\t\t\tthis._nextCoord += height + linkHeight;\n\t\t\tlink.setAll({ y: this._nextCoord - linkHeight, x: maxWidth / 2 });\n\t\t}\n\t\telse {\n\t\t\tlet linkHeight = link.width() * d;\n\n\t\t\tmaxWidth = maxWidth * (endLocation - startLocation) + linkHeight;\n\n\t\t\tslice.set(\"x\", this._nextCoord);\n\n\t\t\tlet width = Math.min(100000, Math.max(0, maxWidth / this._count * d / this._total - linkHeight));\n\n\t\t\tslice.setAll({ width, y: maxHeight / 2 });\n\t\t\tconst labelX = this._nextCoord + width / 2;\n\t\t\tlabel.set(\"x\", labelX);\n\n\t\t\tthis._nextCoord += width + linkHeight;\n\t\t\tlink.setAll({ x: this._nextCoord - linkHeight, y: maxHeight / 2 });\n\t\t}\n\t}\n\n\t/**\n\t * Hides series's data item.\n\t *\n\t * @param   dataItem  Data item\n\t * @param   duration  Animation duration in milliseconds\n\t * @return            Promise\n\t */\n\tpublic async hideDataItem(dataItem: DataItem<this[\"_dataItemSettings\"]>, duration?: number): Promise<void> {\n\t\tdataItem.get(\"link\").hide(duration);\n\t\treturn super.hideDataItem(dataItem, duration)\n\t}\n\n\t/**\n\t * Shows series's data item.\n\t *\n\t * @param   dataItem  Data item\n\t * @param   duration  Animation duration in milliseconds\n\t * @return            Promise\n\t */\n\tpublic async showDataItem(dataItem: DataItem<this[\"_dataItemSettings\"]>, duration?: number): Promise<void> {\n\t\tdataItem.get(\"link\").show(duration);\n\t\treturn super.showDataItem(dataItem, duration)\n\t}\n\n\tprotected _updateTick(dataItem: DataItem<this[\"_dataItemSettings\"]>) {\n\t\tif (this.get(\"alignLabels\")) {\n\t\t\tconst tick = dataItem.get(\"tick\");\n\t\t\tconst label = dataItem.get(\"label\");\n\t\t\tconst slice = dataItem.get(\"slice\");\n\n\t\t\tif (tick && slice && label) {\n\n\t\t\t\tconst labelsContainer = this.labelsContainer;\n\t\t\t\tconst slicesContainer = this.slicesContainer;\n\t\t\t\tlet tickLocation = tick.get(\"location\", 0.5);\n\n\t\t\t\tconst lcw = labelsContainer.width();\n\t\t\t\tconst lch = labelsContainer.height();\n\n\t\t\t\tconst pl = labelsContainer.get(\"paddingLeft\", 0);\n\t\t\t\tconst pr = labelsContainer.get(\"paddingRight\", 0);\n\t\t\t\tconst pt = labelsContainer.get(\"paddingTop\", 0);\n\t\t\t\tconst pb = labelsContainer.get(\"paddingBottom\", 0);\n\n\t\t\t\tlet p0 = { x: 0, y: 0 };\n\t\t\t\tlet p1 = { x: 0, y: 0 };\n\t\t\t\tlet p2 = { x: 0, y: 0 };\n\n\t\t\t\tif (this._opposite) {\n\t\t\t\t\ttickLocation = 1 - tickLocation;\n\t\t\t\t}\n\n\t\t\t\tif (this.get(\"orientation\") == \"vertical\") {\n\t\t\t\t\tp0 = slice.getPoint(tickLocation, 0.5);\n\t\t\t\t\tp0.x += slice.x() + slicesContainer.x();\n\t\t\t\t\tp0.y += slice.y() + slicesContainer.y();\n\n\t\t\t\t\tif (this._opposite) {\n\t\t\t\t\t\tp1.x = lcw;\n\t\t\t\t\t\tp1.y = label.y();\n\n\t\t\t\t\t\tp2.x = lcw - pl;\n\t\t\t\t\t\tp2.y = p1.y;\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tp1.x = slicesContainer.x() + slicesContainer.width();\n\t\t\t\t\t\tp1.y = label.y();\n\n\t\t\t\t\t\tp2.x = p1.x + lcw - label.width() - pr;\n\t\t\t\t\t\tp2.y = p1.y;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tp0 = slice.getPoint(0.5, tickLocation);\n\t\t\t\t\tp0.x += slice.x() + slicesContainer.x();\n\t\t\t\t\tp0.y += slice.y() + slicesContainer.y();\n\n\t\t\t\t\tif (this._opposite) {\n\t\t\t\t\t\tp1.y = lch;\n\t\t\t\t\t\tp1.x = label.x();\n\n\t\t\t\t\t\tp2.y = lch - pt;\n\t\t\t\t\t\tp2.x = p1.x;\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tp1.y = slicesContainer.y() + slicesContainer.height();\n\t\t\t\t\t\tp1.x = label.x();\n\n\t\t\t\t\t\tp2.y = p1.y + lch - label.height() - pb;\n\t\t\t\t\t\tp2.x = p1.x;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\ttick.set(\"points\", [p0, p1, p2]);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic disposeDataItem(dataItem: DataItem<this[\"_dataItemSettings\"]>) {\n\t\tsuper.disposeDataItem(dataItem);\n\t\tlet link = dataItem.get(\"link\");\n\t\tif (link) {\n\t\t\tthis.links.removeValue(link);\n\t\t\tlink.dispose();\n\t\t}\n\t}\n\n\tpublic _positionBullet(bullet: Bullet) {\n\n\t\tconst sprite = bullet.get(\"sprite\");\n\t\tif (sprite) {\n\t\t\tconst dataItem = sprite.dataItem as DataItem<this[\"_dataItemSettings\"]>;\n\t\t\tconst slice = dataItem.get(\"slice\");\n\n\t\t\tif (slice) {\n\t\t\t\tconst width = slice.width();\n\t\t\t\tconst height = slice.height();\n\t\t\t\tconst locationX = bullet.get(\"locationX\", 0.5);\n\t\t\t\tconst locationY = bullet.get(\"locationY\", 0.5);\n\n\t\t\t\tlet dx = 0;\n\t\t\t\tlet dy = 0;\n\t\t\t\tif (this.get(\"orientation\") == \"horizontal\") {\n\t\t\t\t\tdy = height / 2\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tdx = width / 2\n\t\t\t\t}\n\n\t\t\t\tsprite.setAll({ x: slice.x() + width * locationX - dx, y: slice.y() - dy + height * locationY });\n\t\t\t}\n\t\t}\n\t}\n}\n","import type { DataItem } from \"../../core/render/Component\";\nimport { FunnelSeries, IFunnelSeriesSettings, IFunnelSeriesDataItem, IFunnelSeriesPrivate } from \"./FunnelSeries\";\nimport { Percent, p100 } from \"../../core/util/Percent\";\nimport * as $utils from \"../../core/util/Utils\";\nimport * as $type from \"../../core/util/Type\";\n\nexport interface IPyramidSeriesDataItem extends IFunnelSeriesDataItem {\n\n}\n\nexport interface IPyramidSeriesSettings extends IFunnelSeriesSettings {\n\n\t/**\n\t * The width of the tip of the pyramid.\n\t *\n\t * Can either be a fixed pixel value or percent relative to the space\n\t * available to the series.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/percent-charts/sliced-chart/pyramid-series/#Tip_and_base} for more info\n\t * @default 0\n\t */\n\ttopWidth?: number | Percent;\n\n\t/**\n\t * The width of the base of the pyramid.\n\t *\n\t * Can either be a fixed pixel value or percent relative to the space\n\t * available to the series.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/percent-charts/sliced-chart/pyramid-series/#Tip_and_base} for more info\n\t * @default 0\n\t */\n\tbottomWidth?: number | Percent;\n\n\t/**\n\t * Determines calculation mechanism for the slice area based on value.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/percent-charts/sliced-chart/pyramid-series/#Slice_size} for more info\n\t * @default \"area\"\n\t */\n\tvalueIs?: \"area\" | \"height\";\n\n}\n\nexport interface IPyramidSeriesPrivate extends IFunnelSeriesPrivate {\n}\n\n/**\n * Creates a pyramid series for use in a [[SlicedChart]].\n *\n * @see {@link https://www.amcharts.com/docs/v5/charts/percent-charts/sliced-chart/pyramid-series/} for more info\n * @important\n */\nexport class PyramidSeries extends FunnelSeries {\n\tprotected _tag = \"pyramid\";\n\n\tpublic static className: string = \"PyramidSeries\";\n\tpublic static classNames: Array<string> = FunnelSeries.classNames.concat([PyramidSeries.className]);\n\n\tdeclare public _settings: IPyramidSeriesSettings;\n\tdeclare public _privateSettings: IPyramidSeriesPrivate;\n\tdeclare public _dataItemSettings: IPyramidSeriesDataItem;\n\n\tprotected _nextSize: number | undefined;\n\n\tpublic _prepareChildren() {\n\t\tsuper._prepareChildren();\n\t\tthis._nextSize = undefined;\n\t}\n\n\tprotected decorateSlice(dataItem: DataItem<this[\"_dataItemSettings\"]>) {\n\t\tconst orientation = this.get(\"orientation\");\n\t\tconst slicesContainer = this.slicesContainer;\n\n\t\tconst slice = dataItem.get(\"slice\");\n\t\tconst label = dataItem.get(\"label\");\n\t\tconst link = dataItem.get(\"link\");\n\t\tconst valueIs = this.get(\"valueIs\", \"area\");\n\n\t\tconst sum = this.getPrivate(\"valueAbsoluteSum\", 0);\n\n\t\tif (sum == 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst startLocation = this.get(\"startLocation\", 0);\n\t\tconst endLocation = this.get(\"endLocation\", 1);\n\n\t\tconst tw = this.get(\"topWidth\", 0);\n\t\tconst bw = this.get(\"bottomWidth\", p100);\n\n\t\tconst workingValue = Math.abs(dataItem.get(\"valueWorking\", 0));\n\t\tconst value = dataItem.get(\"value\", 0);\n\n\t\tlet sliceHeight: number;\n\t\tlet sliceBottomWidth: number;\n\n\t\tlet pyramidHeight = slicesContainer.innerHeight();\n\t\tlet pyramidWidth = slicesContainer.innerWidth();\n\t\tlet linkWidth = link.width();\n\t\tlet linkHeight = link.height();\n\n\t\tif (orientation == \"horizontal\") {\n\t\t\t[pyramidWidth, pyramidHeight] = [pyramidHeight, pyramidWidth];\n\t\t\t[linkWidth, linkHeight] = [linkHeight, linkWidth];\n\t\t}\n\n\t\tconst center = pyramidWidth / 2;\n\n\t\tlet d = 1;\n\t\tif (value != 0) {\n\t\t\td = workingValue / Math.abs(value);\n\t\t}\n\t\telse {\n\t\t\tif (dataItem.isHidden()) {\n\t\t\t\td = 0.000001;\n\t\t\t}\n\t\t}\n\n\t\tlinkHeight *= d;\n\n\t\tpyramidHeight = pyramidHeight * (endLocation - startLocation) - linkHeight * (this._count * this._total - 1);\n\n\t\tlet topWidth = $utils.relativeToValue(tw, pyramidWidth);\n\n\t\tif (!$type.isNumber(this._nextSize)) {\n\t\t\tthis._nextSize = topWidth;\n\t\t}\n\n\t\tlet bottomWidth = $utils.relativeToValue(bw, pyramidWidth);\n\t\tlet sliceTopWidth = this._nextSize;\n\n\t\tlet angle = Math.atan2(pyramidHeight, topWidth - bottomWidth);\n\t\tlet c = Math.tan(Math.PI / 2 - angle);\n\t\tif (c == 0) {\n\t\t\tc = 0.00000001;\n\t\t}\n\n\t\tif (valueIs == \"area\") {\n\t\t\tlet totalSquare = (topWidth + bottomWidth) / 2 * pyramidHeight;\n\t\t\tlet square = totalSquare * workingValue / sum;\n\n\t\t\tlet s = Math.abs(sliceTopWidth * sliceTopWidth - 2 * square * c);\n\n\t\t\tsliceHeight = (sliceTopWidth - Math.sqrt(s)) / c;\n\n\t\t\tif (sliceHeight > 0) {\n\t\t\t\tsliceBottomWidth = (2 * square - sliceHeight * sliceTopWidth) / sliceHeight;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tsliceBottomWidth = sliceTopWidth;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tsliceHeight = pyramidHeight * workingValue / sum;\n\t\t\tsliceBottomWidth = sliceTopWidth - sliceHeight * c;\n\t\t}\n\n\t\tlet labelCoord = this._nextCoord + sliceHeight / 2;\n\t\tlet sliceX = center;\n\t\tlet sliceY = this._nextCoord;\n\n\t\tlet linkX = center;\n\t\tlet linkY = sliceY + sliceHeight;\n\n\t\tif (orientation == \"vertical\") {\n\t\t\tlabel.set(\"y\", labelCoord);\n\t\t\tif (label.get(\"opacity\") > 0) {\n\t\t\t\tthis._rLabels.push({ label: label, y: labelCoord });\n\t\t\t}\n\t\t\tslice.set(\"height\", sliceHeight);\n\t\t}\n\t\telse {\n\t\t\tlabel.set(\"x\", labelCoord);\n\t\t\tif (label.get(\"opacity\") > 0) {\n\t\t\t\tthis._hLabels.push({ label: label, y: labelCoord });\n\t\t\t}\n\t\t\t[sliceX, sliceY] = [sliceY, sliceX];\n\t\t\t[linkX, linkY] = [linkY, linkX];\n\n\t\t\tslice.set(\"width\", sliceHeight);\n\t\t}\n\n\t\tslice.setAll({ orientation, bottomWidth: sliceBottomWidth, topWidth: sliceTopWidth, x: sliceX, y: sliceY });\n\t\tlink.setAll({ orientation, x: linkX, y: linkY, topWidth: sliceBottomWidth, bottomWidth: sliceBottomWidth });\n\n\t\tthis._nextSize = sliceBottomWidth;\n\t\tthis._nextCoord += sliceHeight + linkHeight;\n\t}\n}\n","import { PyramidSeries, IPyramidSeriesSettings, IPyramidSeriesDataItem, IPyramidSeriesPrivate } from \"./PyramidSeries\";\nimport { Graphics } from \"../../core/render/Graphics\";\nimport { p100, p50 } from \"../../core/util/Percent\"\n\n\nexport interface IPictorialStackedSeriesDataItem extends IPyramidSeriesDataItem {\n\n}\n\nexport interface IPictorialStackedSeriesSettings extends IPyramidSeriesSettings {\n\n\t/**\n\t * An SVG path that will define the shape of the pictorial series.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/percent-charts/sliced-chart/pictorial-stacked-series/#Shape_of_the_series} for more info\n\t */\n\tsvgPath?: string;\n\n}\n\nexport interface IPictorialStackedSeriesPrivate extends IPyramidSeriesPrivate {\n}\n\n/**\n * Creates a pictorial series for use in a [[SlicedChart]].\n *\n * @see {@link https://www.amcharts.com/docs/v5/charts/percent-charts/sliced-chart/pictorial-stacked-series/} for more info\n * @important\n */\nexport class PictorialStackedSeries extends PyramidSeries {\n\tprotected _tag = \"pictorial\";\n\n\tpublic static className: string = \"PictorialStackedSeries\";\n\tpublic static classNames: Array<string> = PyramidSeries.classNames.concat([PictorialStackedSeries.className]);\n\n\tdeclare public _settings: IPictorialStackedSeriesSettings;\n\tdeclare public _privateSettings: IPictorialStackedSeriesPrivate;\n\tdeclare public _dataItemSettings: IPictorialStackedSeriesDataItem;\n\n\t/**\n\t * A [[Graphics]] element to used as a mask (shape) for the series.\n\t *\n\t * This element is read-only. To modify the mask/shape, use the `svgPath` setting.\n\t */\n\tpublic readonly seriesMask: Graphics = Graphics.new(this._root, { position: \"absolute\", x: p50, y: p50, centerX: p50, centerY: p50 });\n\n\tpublic readonly seriesGraphics: Graphics = this.slicesContainer.children.push(Graphics.new(this._root, { themeTags: [\"pictorial\", \"background\"], position: \"absolute\", x: p50, y: p50, centerX: p50, centerY: p50 }));\n\n\tprotected _afterNew() {\n\t\tsuper._afterNew();\n\t\tthis.set(\"topWidth\", p100);\n\t\tthis.set(\"bottomWidth\", p100);\n\t\tthis.set(\"valueIs\", \"height\");\n\t\tthis.slicesContainer.set(\"mask\", this.seriesMask);\n\t}\n\n\tprotected _updateScale() {\n\t\tlet slicesContainer = this.slicesContainer;\n\n\t\tlet w = slicesContainer.innerWidth();\n\t\tlet h = slicesContainer.innerHeight();\n\n\t\tlet seriesMask = this.seriesMask;\n\t\tlet seriesGraphics = this.seriesGraphics;\n\t\tlet scale = seriesMask.get(\"scale\", 1);\n\n\t\tconst bounds = seriesMask.localBounds();\n\n\t\tlet mw = bounds.right - bounds.left;\n\t\tlet mh = bounds.bottom - bounds.top;\n\t\tif (this.get(\"orientation\") == \"horizontal\") {\n\t\t\tscale = w / mw;\n\t\t}\n\t\telse {\n\t\t\tscale = h / mh;\n\t\t}\n\t\tif (scale != Infinity && scale != NaN) {\n\t\t\tseriesMask.set(\"scale\", scale);\n\t\t\tseriesMask.set(\"x\", w / 2);\n\t\t\tseriesMask.set(\"y\", h / 2);\n\n\t\t\tseriesGraphics.set(\"scale\", scale);\n\t\t\tseriesGraphics.set(\"x\", w / 2);\n\t\t\tseriesGraphics.set(\"y\", h / 2);\n\t\t}\n\t}\n\n\tpublic _prepareChildren() {\n\t\tsuper._prepareChildren();\n\t\tif (this.isDirty(\"svgPath\")) {\n\t\t\tconst svgPath = this.get(\"svgPath\");\n\t\t\tthis.seriesMask.set(\"svgPath\", svgPath);\n\t\t\tthis.seriesGraphics.set(\"svgPath\", svgPath);\n\t\t}\n\n\t\tthis._updateScale();\n\t}\n\n}\n","import { PercentChart, IPercentChartPrivate, IPercentChartSettings } from \"../percent/PercentChart\";\nimport type { PercentSeries } from \"../percent/PercentSeries\";\n\n\nexport interface ISlicedChartSettings extends IPercentChartSettings {\n}\n\nexport interface ISlicedChartPrivate extends IPercentChartPrivate {\n}\n\n/**\n * Creates a sliced chart for use with [[FunnelSeries]], [[PyramidSeries]], or [[PictorialStackedSeries]].\n *\n * @see {@link https://www.amcharts.com/docs/v5/charts/percent-charts/pie-chart/} for more info\n * @important\n */\nexport class SlicedChart extends PercentChart {\n\tprotected _afterNew() {\n\t\tsuper._afterNew();\n\n\t\tthis.seriesContainer.setAll({ isMeasured:true, layout: this._root.horizontalLayout });\n\t}\n\n\tpublic static className: string = \"SlicedChart\";\n\tpublic static classNames: Array<string> = PercentChart.classNames.concat([SlicedChart.className]);\n\n\tdeclare public _settings: ISlicedChartSettings;\n\tdeclare public _privateSettings: ISlicedChartPrivate;\n\tdeclare public _seriesType: PercentSeries;\n}\n"],"names":["PercentDefaultTheme","_Theme","_inherits","_super","_createSuper","_classCallCheck","apply","arguments","_createClass","key","value","_get","_getPrototypeOf","prototype","call","ic","this","_root","interfaceColors","r","rule","bind","setAll","legendLabelText","legendValueText","colors","ColorSet","new","width","p100","height","radius","percent","startAngle","endAngle","alignLabels","states","create","opacity","position","isMeasured","x","y","toggleKey","tooltipText","strokeWidth","strokeOpacity","role","lineJoin","shiftRadius","scale","textType","text","paddingTop","paddingBottom","populateText","location","paddingLeft","paddingRight","startLocation","endLocation","orientation","sequencedInterpolation","interactive","expandDistance","centerY","p50","centerX","rotation","fillOpacity","valueIs","setColor","Theme","PercentChart","_SerialChart","_defaultThemes","push","chartContainer","children","seriesContainer","bulletsContainer","series","moveValue","length","SerialChart","Object","defineProperty","classNames","concat","className","PercentSeries","_Series","_super2","_this","_assertThisInitialized","Container","_makeSlices","_makeLabels","_makeTicks","dataItem","_this2","slice","slicesContainer","slices","make","on","updateLegendMarker","_setDataItem","set","label","labelsContainer","labels","get","tick","ticksContainer","ticks","fields","reset","_lLabels","_rLabels","_hLabels","_valuesDirty","sum","absSum","valueHigh","valueLow","Infinity","count","$array","_dataItems","valueWorking","Math","abs","percentTotal","setRaw","setPrivateRaw","duration","_this3","promises","show","_sequencedShowHide","_context","next","Promise","all","stop","_callee","_this4","hide","_context2","_callee2","_this5","markDirtyText","isDirty","updateLegendValue","_arrange","_this6","_arrangeDown","_arrangeUp","_arrangeLeft","_arrangeRight","dataItems","_updateTick","_this7","showDataItem","$type","easing","animation","animate","to","waitForStop","applyAnimate","_context3","_callee3","_this8","hideDataItem","hiddenState","hideTooltip","_context4","_callee4","removeValue","dispose","isHidden","hover","unhover","legendDataItem","markerRectangle","visualSettings","setting","_getNextDown","sort","a","b","l","bounds","adjustedLocalBounds","labelTop","top","bottom","maxHeight","_getNextUp","labelBottom","labelLeft","left","right","maxWidth","labelRight","markDirty","_dataItem","chart","Series","PieChart","_PercentChart","w","innerWidth","h","innerHeight","innerRadius","$math","wr","hr","innerBounds","Percent","mr","min","max","prevRadius","_maxRadius","$utils","dy","dx","each","_markDirtyKey","index","indexOf","seriesRadius","seriesInnerRadius","PieSeries","_PercentSeries","ListTemplate","Template","Slice","_new","themeTags","template","RadialLabel","Tick","makeSlice","events","makeLabel","makeTick","labelsTemplate","markDirtyBounds","arc","currentAngle","getPrivate","currentArc","color","_setDefault","middleAngle","setPrivate","labelRadius","isHiding","labelAngle","cos","sin","pl","pr","bullet","sprite","angle","FunnelSlice","_Graphics","display","moveTo","_tlx","_tly","lineTo","_trx","_try","quadraticCurveTo","_cprx","_cpry","_brx","_bry","_blx","_bly","_cplx","_cply","locationX","locationY","tw","bw","tlx","trx","mlx","_clear","ed","Graphics","FunnelSeries","_makeLinks","_tag","Label","links","link","onPrivate","markDirtySize","horizontalLayout","verticalLayout","makeLink","_opposite","total","_total","_count","_fixLayout","_sizeDirty","_nextCoord","i","decorateSlice","isLast","nextValue","nextItem","getNextValue","maxSize","workingValue","bottomRatio","d","topWidth","bottomWidth","linkHeight","labelY","labelX","_this9","abrupt","_this10","tickLocation","lcw","lch","pt","pb","p0","p1","p2","getPoint","PyramidSeries","_FunnelSeries","_nextSize","undefined","sliceHeight","sliceBottomWidth","pyramidHeight","pyramidWidth","linkWidth","_ref","_ref2","center","sliceTopWidth","atan2","c","tan","PI","square","s","sqrt","labelCoord","sliceX","sliceY","linkX","linkY","_ref3","_ref4","PictorialStackedSeries","_PyramidSeries","seriesMask","seriesGraphics","localBounds","mw","mh","NaN","svgPath","_updateScale","SlicedChart","layout"],"sourceRoot":""}