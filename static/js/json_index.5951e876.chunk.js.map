{"version":3,"file":"static/js/json_index.5951e876.chunk.js","mappings":"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","sources":["../node_modules/src/.internal/core/render/Picture.ts","../node_modules/src/.internal/core/render/gradients/Gradient.ts","../node_modules/src/.internal/core/render/gradients/LinearGradient.ts","../node_modules/src/.internal/core/render/Star.ts","../node_modules/src/.internal/core/render/HeatLegend.ts","../node_modules/src/.internal/core/render/Triangle.ts","../node_modules/src/.internal/core/render/Slider.ts","../node_modules/src/.internal/core/render/gradients/RadialGradient.ts","../node_modules/src/.internal/core/render/patterns/CirclePattern.ts","../node_modules/src/.internal/core/render/patterns/LinePattern.ts","../node_modules/src/.internal/core/render/patterns/RectanglePattern.ts","../node_modules/src/.internal/core/render/patterns/PathPattern.ts"],"sourcesContent":["import type { IPicture } from \"./backend/Renderer\";\nimport type { Color } from \"../util/Color\";\n\nimport { Sprite, ISpriteEvents, ISpriteSettings, ISpritePrivate } from \"./Sprite\";\n\nimport * as $type from \"../util/Type\";\n\nexport interface IPictureSettings extends ISpriteSettings {\n\n\t/**\n\t * A source URI of the image.\n\t *\n\t * Can be relative or absolute URL, or data-uri.\n\t */\n\tsrc?: string;\n\n\t/**\n\t * CORS settings for loading the image. Defaults to \"anonymous\".\n\t *\n\t * @since 5.3.6\n\t * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/crossOrigin} for more info\n\t */\n\tcors?: string | null;\n\n\t/**\n\t * Color of the element's shadow.\n\t *\n\t * For this to work at least one of the following needs to be set as well:\n\t * `shadowBlur`, `shadowOffsetX`, `shadowOffsetY`.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/shadows/} for more info\n\t */\n\tshadowColor?: Color | null;\n\n\t/**\n\t * Blurriness of the the shadow.\n\t *\n\t * The bigger the number, the more blurry shadow will be.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/shadows/} for more info\n\t */\n\tshadowBlur?: number;\n\n\t/**\n\t * Horizontal shadow offset in pixels.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/shadows/} for more info\n\t */\n\tshadowOffsetX?: number;\n\n\t/**\n\t * Vertical shadow offset in pixels.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/shadows/} for more info\n\t */\n\tshadowOffsetY?: number;\n\n\t/**\n\t * Opacity of the shadow (0-1).\n\t *\n\t * If not set, will use the same as `fillOpacity` of the element.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/shadows/} for more info\n\t */\n\tshadowOpacity?: number;\n\n}\n\nexport interface IPicturePrivate extends ISpritePrivate {\n}\n\nexport interface IPictureEvents extends ISpriteEvents {\n\n\t/**\n\t * Invoked when picture is loaded.\n\t */\n\tloaded: {};\n\n\t/**\n\t * Invoked when picture load error happens.\n\t */\n\tloaderror: {};\n}\n\n/**\n * Displays an image.\n *\n * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/images/} for more info\n * @important\n */\nexport class Picture extends Sprite {\n\n\tdeclare public _settings: IPictureSettings;\n\tdeclare public _privateSettings: IPicturePrivate;\n\n\tpublic _display: IPicture = this._root._renderer.makePicture(undefined);\n\n\tpublic static className: string = \"Picture\";\n\tpublic static classNames: Array<string> = Sprite.classNames.concat([Picture.className]);\n\tdeclare public _events: IPictureEvents;\n\n\tpublic _changed() {\n\t\tsuper._changed();\n\n\t\tif (this.isDirty(\"width\")) {\n\t\t\tconst width = this.get(\"width\");\n\t\t\tthis._display.width = $type.isNumber(width) ? width : undefined;\n\t\t}\n\n\t\tif (this.isDirty(\"height\")) {\n\t\t\tconst height = this.get(\"height\");\n\t\t\tthis._display.height = $type.isNumber(height) ? height : undefined;\n\t\t}\n\n\t\tif (this.isDirty(\"shadowColor\")) {\n\t\t\tthis._display.clear();\n\t\t\tconst shadowColor = this.get(\"shadowColor\");\n\t\t\tthis._display.shadowColor = shadowColor == null ? undefined : shadowColor;\n\t\t}\n\n\t\tif (this.isDirty(\"shadowBlur\")) {\n\t\t\tthis._display.clear();\n\t\t\tthis._display.shadowBlur = this.get(\"shadowBlur\");\n\t\t}\n\n\t\tif (this.isDirty(\"shadowOffsetX\")) {\n\t\t\tthis._display.clear();\n\t\t\tthis._display.shadowOffsetX = this.get(\"shadowOffsetX\");\n\t\t}\n\n\t\tif (this.isDirty(\"shadowOffsetY\")) {\n\t\t\tthis._display.clear();\n\t\t\tthis._display.shadowOffsetY = this.get(\"shadowOffsetY\");\n\t\t}\n\n\t\tif (this.isDirty(\"shadowOpacity\")) {\n\t\t\tthis._display.clear();\n\t\t\tthis._display.shadowOpacity = this.get(\"shadowOpacity\");\n\t\t}\n\n\t\tif (this.isDirty(\"src\") || this.isDirty(\"cors\")) {\n\t\t\tthis._display.clear();\n\t\t\tthis._load();\n\t\t}\n\t}\n\n\tprotected _load() {\n\t\tconst src = this.get(\"src\");\n\t\tif (src) {\n\t\t\tlet eventType: \"loaded\" | \"loaderror\" = \"loaded\";\n\t\t\tconst image = new Image();\n\t\t\timage.crossOrigin = this.get(\"cors\", \"anonymous\");\n\t\t\timage.src = src!;\n\t\t\timage.decode().then(() => {\n\t\t\t\tthis._display.image = image;\n\t\t\t\tthis._updateSize();\n\t\t\t}).catch((_error: any) => {\n\t\t\t\teventType = \"loaderror\";\n\t\t\t});\n\n\t\t\tif (this.events.isEnabled(eventType)) {\n\t\t\t\tthis.events.dispatch(eventType, { type: eventType, target: this });\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic _updateSize() {\n\t\tsuper._updateSize();\n\n\t\tconst image = this._display.image;\n\t\tif (image) {\n\t\t\tlet w = this.getPrivate(\"width\", this.get(\"width\"));\n\t\t\tlet h = this.getPrivate(\"height\", this.get(\"height\"));\n\t\t\tconst r = image.width && image.height ? image.width / image.height : 0;\n\n\t\t\tif ($type.isNumber(w) && $type.isNumber(h)) {\n\t\t\t\tthis._display.width = w;\n\t\t\t\tthis._display.height = h;\n\t\t\t}\n\t\t\telse if ($type.isNumber(w) && r) {\n\t\t\t\th = w / r;\n\t\t\t}\n\t\t\telse if ($type.isNumber(h) && r) {\n\t\t\t\tw = h * r;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tw = image.width;\n\t\t\t\th = image.height;\n\t\t\t}\n\n\t\t\tif ($type.isNumber(w)) {\n\t\t\t\tthis._display.width = w;\n\t\t\t}\n\t\t\tif ($type.isNumber(h)) {\n\t\t\t\tthis._display.height = h;\n\t\t\t}\n\t\t\tthis.markDirtyBounds();\n\t\t\tthis.markDirty();\n\t\t}\n\t}\n}\n","import type { IBounds } from \"../../util/IBounds\"\nimport type { IGradient, IGradientStop } from \"../backend/Renderer\";\nimport type { Sprite } from \"../Sprite\";\n\nimport { Entity, IEntitySettings, IEntityPrivate } from \"../../util/Entity\"\n\n\nexport interface IGradientSettings extends IEntitySettings {\n\n\t/**\n\t * A list of color steps for the gradient.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/gradients/} for more info\n\t */\n\tstops?: Array<IGradientStop>;\n\n\t/**\n\t * Gradient target.\n\t */\n\ttarget?: Sprite;\n\n}\n\nexport interface IGradientPrivate extends IEntityPrivate {\n}\n\n/**\n * Base class for gradients.\n *\n * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/gradients/} for more info\n */\nexport abstract class Gradient extends Entity {\n\n\tdeclare public _settings: IGradientSettings;\n\tdeclare public _privateSettings: IGradientPrivate;\n\n\tpublic static className: string = \"Gradient\";\n\tpublic static classNames: Array<string> = Entity.classNames.concat([Gradient.className]);\n\n\tprotected _afterNew() {\n\t\t// Applying themes because gradient will not have parent\n\t\tsuper._afterNewApplyThemes();\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic getFill(_target: Sprite): IGradient {\n\t\treturn {\n\t\t\taddColorStop: (_offset: number, _color: string) => { }\n\t\t};\n\t}\n\n\tpublic _changed() {\n\t\tsuper._changed();\n\n\t\t//if (this.isDirty(\"target\") && this.get(\"target\")) {\n\t\t//\tthis.get(\"target\")!.events.on(\"boundschanged\", () => {\n\n\t\t//\t});\n\t\t//}\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic getBounds(target: Sprite): IBounds {\n\t\tconst gradientTarget = this.get(\"target\");\n\t\tif (gradientTarget) {\n\t\t\tlet bounds = gradientTarget.globalBounds();\n\n\t\t\tconst p0 = target.toLocal({ x: bounds.left, y: bounds.top });\n\t\t\tconst p1 = target.toLocal({ x: bounds.right, y: bounds.top });\n\t\t\tconst p2 = target.toLocal({ x: bounds.right, y: bounds.bottom });\n\t\t\tconst p3 = target.toLocal({ x: bounds.left, y: bounds.bottom });\n\n\t\t\treturn {\n\t\t\t\tleft: Math.min(p0.x, p1.x, p2.x, p3.x),\n\t\t\t\ttop: Math.min(p0.y, p1.y, p2.y, p3.y),\n\t\t\t\tright: Math.max(p0.x, p1.x, p2.x, p3.x),\n\t\t\t\tbottom: Math.max(p0.y, p1.y, p2.y, p3.y)\n\t\t\t}\n\t\t}\n\t\treturn target._display.getLocalBounds();\n\t}\n\n}\n","import type { IGradient } from \"../backend/Renderer\";\nimport type { Sprite } from \"../Sprite\";\n\nimport { Gradient, IGradientSettings, IGradientPrivate } from \"./Gradient\";\nimport { Color } from \"../../util/Color\";\n\nimport * as $array from \"../../util/Array\";\nimport * as $type from \"../../util/Type\";\nimport * as $math from \"../../util/Math\";\n\n\nexport interface ILinearGradientSettings extends IGradientSettings {\n\n\t/**\n\t * Gradient rotation, in degrees.\n\t *\n\t * @default 90\n\t */\n\trotation?: number;\n\n}\n\nexport interface ILinearGradientPrivate extends IGradientPrivate {\n}\n\n/**\n * Linear gradient.\n *\n * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/gradients/} for more info\n */\nexport class LinearGradient extends Gradient {\n\n\tdeclare public _settings: ILinearGradientSettings;\n\tdeclare public _privateSettings: ILinearGradientPrivate;\n\n\tpublic static className: string = \"LinearGradient\";\n\tpublic static classNames: Array<string> = Gradient.classNames.concat([LinearGradient.className]);\n\n\t/**\n\t * @ignore\n\t */\n\tpublic getFill(target: Sprite): IGradient {\n\t\tconst rotation = this.get(\"rotation\", 0);\n\t\tlet bounds = this.getBounds(target);\n\n\t\tlet l = bounds.left || 0;\n\t\tlet r = bounds.right || 0;\n\t\tlet t = bounds.top || 0;\n\t\tlet b = bounds.bottom || 0;\n\n\t\tlet cos = $math.cos(rotation);\n\t\tlet sin = $math.sin(rotation);\n\n\t\tlet w = cos * (r - l);\n\t\tlet h = sin * (b - t);\n\n\t\tlet longer = Math.max(w, h);\n\n\t\tconst gradient = this._root._renderer.createLinearGradient(\n\t\t\tl,\n\t\t\tt,\n\t\t\tl + longer * cos,\n\t\t\tt + longer * sin\n\t\t);\n\n\t\tconst stops = this.get(\"stops\")!;\n\t\tif (stops) {\n\t\t\tlet i = 0;\n\t\t\t$array.each(stops, (stop) => {\n\n\t\t\t\tlet offset = stop.offset;\n\n\t\t\t\tif (!$type.isNumber(offset)) {\n\t\t\t\t\toffset = i / (stops.length - 1);\n\t\t\t\t}\n\n\t\t\t\tlet opacity = stop.opacity;\n\n\t\t\t\tif (!$type.isNumber(opacity)) {\n\t\t\t\t\topacity = 1;\n\t\t\t\t}\n\n\t\t\t\tlet color = stop.color;\n\n\t\t\t\tif (color) {\n\n\t\t\t\t\tconst lighten = stop.lighten;\n\t\t\t\t\tif (lighten) {\n\t\t\t\t\t\tcolor = Color.lighten(color, lighten)\n\t\t\t\t\t}\n\n\t\t\t\t\tconst brighten = stop.brighten;\n\t\t\t\t\tif (brighten) {\n\t\t\t\t\t\tcolor = Color.brighten(color, brighten)\n\t\t\t\t\t}\n\n\t\t\t\t\tgradient.addColorStop(offset, 'rgba(' + color.r + ',' + color.g + ',' + color.b + ',' + opacity + ')');\n\t\t\t\t}\n\t\t\t\ti++;\n\t\t\t})\n\t\t}\n\t\treturn gradient;\n\t}\n}\n","import { Graphics, IGraphicsSettings, IGraphicsPrivate } from \"./Graphics\";\r\nimport type { Percent } from \"../../core/util/Percent\";\r\nimport * as $utils from \"../../core/util/Utils\";\r\n\r\nexport interface IStarSettings extends IGraphicsSettings {\r\n\r\n\t/**\r\n\t * Star's radius in pixels.\r\n\t */\r\n\tradius?: number;\r\n\r\n\t/**\r\n\t * Star's inner radius in pixels.\r\n\t */\r\n\tinnerRadius?: number | Percent;\r\n\r\n\t/**\r\n\t * Number of spikes\r\n\t */\r\n\tspikes?: number;\r\n\r\n}\r\n\r\nexport interface IStarPrivate extends IGraphicsPrivate {\r\n}\r\n\r\n/**\r\n * Draws a Star.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/graphics/} for more info\r\n * @important\r\n */\r\nexport class Star extends Graphics {\r\n\r\n\tdeclare public _settings: IStarSettings;\r\n\tdeclare public _privateSettings: IStarPrivate;\r\n\r\n\tpublic static className: string = \"Star\";\r\n\tpublic static classNames: Array<string> = Graphics.classNames.concat([Star.className]);\r\n\r\n\tpublic _beforeChanged() {\r\n\t\tsuper._beforeChanged();\r\n\r\n\t\tif (this.isDirty(\"radius\") || this.isDirty(\"innerRadius\") || this.isDirty(\"spikes\")) {\r\n\t\t\tthis._clear = true;\r\n\t\t}\r\n\t}\r\n\r\n\tpublic _changed() {\r\n\t\tsuper._changed();\r\n\r\n\t\tif (this._clear) {\r\n\t\t\tconst display = this._display;\r\n\t\t\tconst r = this.get(\"radius\", 0);\r\n\t\t\tconst ir = $utils.relativeToValue(this.get(\"innerRadius\", 0), r);\r\n\t\t\tconst spikes = this.get(\"spikes\", 0);\r\n\t\t\tconst step = Math.PI / spikes;\r\n\t\t\tlet angle = Math.PI / 2 * 3;\r\n\r\n\t\t\tdisplay.moveTo(0, - r)\r\n\r\n\t\t\tfor (let i = 0; i < spikes; i++) {\r\n\t\t\t\tdisplay.lineTo(Math.cos(angle) * r, Math.sin(angle) * r)\r\n\t\t\t\tangle += step\r\n\r\n\t\t\t\tdisplay.lineTo(Math.cos(angle) * ir, Math.sin(angle) * ir)\r\n\t\t\t\tangle += step\r\n\t\t\t}\r\n\t\t\tdisplay.lineTo(0, -r)\r\n\t\t\tdisplay.closePath();\r\n\t\t}\r\n\t}\r\n}\r\n","import type { IPoint } from \"../../core/util/IPoint\";\n\nimport { Container, IContainerSettings, IContainerPrivate } from \"./Container\";\nimport { Label } from \"../../core/render/Label\";\nimport { p100 } from \"../../core/util/Percent\";\nimport { RoundedRectangle } from \"../../core/render/RoundedRectangle\";\nimport { Template } from \"../../core/util/Template\";\nimport { ListTemplate } from \"../../core/util/List\";\nimport { Color } from \"../../core/util/Color\";\nimport { Tooltip } from \"../../core/render/Tooltip\";\nimport { LinearGradient } from \"../../core/render/gradients/LinearGradient\";\n\nimport * as $utils from \"../../core/util/Utils\";\nimport * as $type from \"../../core/util/Type\";\n\nexport interface IHeatLegendSettings extends IContainerSettings {\n\n\t/**\n\t * Starting (lowest value) color.\n\t */\n\tstartColor: Color;\n\n\t/**\n\t * Ending (highest value) color.\n\t */\n\tendColor: Color;\n\n\t/**\n\t * Start (lowest) value.\n\t */\n\tstartValue?: number;\n\n\t/**\n\t * End (highest) value.\n\t */\n\tendValue?: number;\n\n\t/**\n\t * Text for start label.\n\t */\n\tstartText?: string;\n\n\t/**\n\t * Text for end label.\n\t */\n\tendText?: string;\n\n\t/**\n\t * Number of steps\n\t *\n\t * @default 1\n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/legend/heat-legend/#Gradient_or_steps} for more info\n\t */\n\tstepCount?: number;\n\n\t/**\n\t * Orientation of the heat legend.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/legend/heat-legend/#Orientation} for more info\n\t */\n\torientation: \"horizontal\" | \"vertical\";\n\n}\n\nexport interface IHeatLegendPrivate extends IContainerPrivate {\n}\n\n/**\n * Heat legend.\n *\n * @see {@link https://www.amcharts.com/docs/v5/concepts/legend/heat-legend/} for more info\n */\nexport class HeatLegend extends Container {\n\n\t/**\n\t * A [[Container]] that all labels are placed in.\n\t *\n\t * @default Container.new()\n\t */\n\tpublic readonly labelContainer: Container = this.children.push(Container.new(this._root, {}));\n\n\t/**\n\t * A [[Container]] that all markers are placed in.\n\t *\n\t * @default Container.new()\n\t */\n\tpublic readonly markerContainer: Container = this.children.push(Container.new(this._root, {}));\n\n\t/**\n\t * A start [[Label]].\n\t *\n\t * @default Label.new()\n\t */\n\tpublic readonly startLabel: Label = this.labelContainer.children.push(Label.new(this._root, { themeTags: [\"start\"] }));\n\n\t/**\n\t * An end [[Label]].\n\t *\n\t * @default Label.new()\n\t */\n\tpublic readonly endLabel: Label = this.labelContainer.children.push(Label.new(this._root, { themeTags: [\"end\"] }));\n\n\tpublic static className: string = \"HeatLegend\";\n\tpublic static classNames: Array<string> = Container.classNames.concat([HeatLegend.className]);\n\n\tdeclare public _settings: IHeatLegendSettings;\n\tdeclare public _privateSettings: IHeatLegendPrivate;\n\n\n\tprotected _afterNew() {\n\t\tthis._settings.themeTags = $utils.mergeTags(this._settings.themeTags, [\"heatlegend\", this._settings.orientation]);\n\t\tsuper._afterNew();\n\t\tthis.set(\"tooltip\", Tooltip.new(this._root, {\n\t\t\tthemeTags: [\"heatlegend\"]\n\t\t}));\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic makeMarker(): RoundedRectangle {\n\t\tconst marker = this.markers.make();\n\t\tmarker.states.create(\"disabled\", {});\n\t\treturn marker;\n\t}\n\n\t/**\n\t * List of rectangle elements used for default legend markers.\n\t *\n\t * @default new ListTemplate<RoundedRectangle>\n\t */\n\tpublic readonly markers: ListTemplate<RoundedRectangle> = new ListTemplate(\n\t\tTemplate.new({}),\n\t\t() => RoundedRectangle._new(this._root, {\n\t\t\tthemeTags: $utils.mergeTags(this.markers.template.get(\"themeTags\", []), [this.get(\"orientation\"), \"heatlegend\", \"marker\"])\n\t\t}, [this.markers.template])\n\t);\n\n\n\t/**\n\t * Moves and shows tooltip at specific value.\n\t *\n\t * Can also specify optional text to show in tooltip, as well as the color.\n\t *\n\t * @param  value  Value\n\t * @param  text   Text\n\t * @param  color  Color\n\t */\n\tpublic showValue(value: number, text?: string, color?: Color) {\n\t\tconst tooltip = this.getTooltip();\n\t\tif (tooltip && $type.isNumber(value)) {\n\n\t\t\tconst startValue = this.get(\"startValue\", 0);\n\t\t\tconst endValue = this.get(\"endValue\", 1);\n\n\t\t\tconst c = (value - startValue) / (endValue - startValue);\n\t\t\tconst startColor = this.get(\"startColor\")!;\n\t\t\tconst endColor = this.get(\"endColor\")!;\n\n\t\t\tif (!text) {\n\t\t\t\ttext = this.getNumberFormatter().format(value);\n\t\t\t}\n\n\t\t\tif (!color) {\n\t\t\t\tcolor = Color.interpolate(c, startColor, endColor);\n\t\t\t}\n\n\t\t\ttooltip.label.set(\"text\", text);\n\t\t\tlet p:IPoint;\n\n\t\t\tif (this.get(\"orientation\") == \"vertical\") {\n\t\t\t\tp = this.markerContainer.toGlobal({ x: 0, y: this.innerHeight() * (1 - c) });\n\t\t\t}\n\t\t\telse {\n\t\t\t\tp = this.markerContainer.toGlobal({ x: this.innerWidth() * c, y: 0 });\n\t\t\t}\n\n\t\t\tlet background = tooltip.get(\"background\");\n\t\t\tif (background) {\n\t\t\t\tbackground.set(\"fill\", Color.interpolate(c, startColor, endColor))\n\t\t\t}\n\t\t\ttooltip.set(\"pointTo\", p);\n\t\t\ttooltip.show();\n\t\t}\n\t}\n\n\tpublic _prepareChildren() {\n\t\tsuper._prepareChildren();\n\n\t\tconst labelContainer = this.labelContainer;\n\t\tconst orientation = this.get(\"orientation\");\n\t\tconst startLabel = this.startLabel;\n\t\tconst endLabel = this.endLabel;\n\t\tconst tooltip = this.getTooltip();\n\n\t\tif (this.isDirty(\"orientation\")) {\n\t\t\tif (orientation == \"vertical\") {\n\t\t\t\tthis.markerContainer.setAll({ layout: this._root.verticalLayout, height: p100 });\n\t\t\t\tthis.set(\"layout\", this._root.horizontalLayout);\n\t\t\t\tstartLabel.setAll({ y: p100, x: undefined, centerY: p100, centerX: p100 });\n\t\t\t\tendLabel.setAll({ y: 0, x: undefined, centerY: 0, centerX: p100 });\n\t\t\t\tlabelContainer.setAll({ height: p100, width: undefined });\n\t\t\t\tif (tooltip) {\n\t\t\t\t\ttooltip.set(\"pointerOrientation\", \"horizontal\");\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.markerContainer.setAll({ layout: this._root.horizontalLayout, width: p100 });\n\t\t\t\tthis.set(\"layout\", this._root.verticalLayout);\n\t\t\t\tstartLabel.setAll({ x: 0, y: undefined, centerX: 0, centerY: 0 });\n\t\t\t\tendLabel.setAll({ x: p100, y: undefined, centerX: p100, centerY: 0 });\n\t\t\t\tlabelContainer.setAll({ width: p100, height: undefined });\n\t\t\t\tif (tooltip) {\n\t\t\t\t\ttooltip.set(\"pointerOrientation\", \"vertical\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (this.isDirty(\"stepCount\")) {\n\t\t\tconst stepCount = this.get(\"stepCount\", 1);\n\t\t\tconst startColor = this.get(\"startColor\")!;\n\t\t\tconst endColor = this.get(\"endColor\")!;\n\t\t\tthis.markerContainer.children.clear();\n\t\t\tif (stepCount > 1) {\n\t\t\t\tfor (let i = 0; i < stepCount; i++) {\n\t\t\t\t\tconst marker = this.makeMarker();\n\n\t\t\t\t\tif (orientation == \"vertical\") {\n\t\t\t\t\t\tthis.markerContainer.children.moveValue(marker, 0);\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tthis.markerContainer.children.push(marker);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (startColor && endColor) {\n\t\t\t\t\t\tmarker.set(\"fill\", Color.interpolate(i / stepCount, startColor, endColor));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (stepCount == 1) {\n\t\t\t\tconst marker = this.makeMarker();\n\t\t\t\tthis.markerContainer.children.push(marker);\n\t\t\t\tconst gradient = LinearGradient.new(this._root, { stops: [{ color: startColor }, { color: endColor }] });\n\n\t\t\t\tif (orientation == \"vertical\") {\n\t\t\t\t\tgradient.set(\"rotation\", 90);\n\t\t\t\t\tlet stops = gradient.get(\"stops\");\n\t\t\t\t\tif (stops) {\n\t\t\t\t\t\tstops.reverse();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tgradient.set(\"rotation\", 0);\n\t\t\t\t}\n\t\t\t\tif (startColor && endColor) {\n\t\t\t\t\tmarker.set(\"fillGradient\", gradient);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (this.isDirty(\"startText\") || this.isDirty(\"startValue\")) {\n\t\t\tstartLabel.set(\"text\", this.get(\"startText\", this.getNumberFormatter().format(this.get(\"startValue\", 0))));\n\t\t}\n\n\t\tif (this.isDirty(\"endText\") || this.isDirty(\"endValue\")) {\n\t\t\tendLabel.set(\"text\", this.get(\"endText\", this.getNumberFormatter().format(this.get(\"endValue\", 1))))\n\t\t}\n\t}\n}\n","import { Graphics, IGraphicsSettings, IGraphicsPrivate } from \"./Graphics\";\r\n\r\nexport interface ITriangleSettings extends IGraphicsSettings {\r\n}\r\n\r\nexport interface ITrianglePrivate extends IGraphicsPrivate {\r\n}\r\n\r\n/**\r\n * Draws a triangle.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/graphics/} for more info\r\n * @important\r\n */\r\nexport class Triangle extends Graphics {\r\n\r\n\tdeclare public _settings: ITriangleSettings;\r\n\tdeclare public _privateSettings: ITrianglePrivate;\r\n\r\n\tpublic static className: string = \"Triangle\";\r\n\tpublic static classNames: Array<string> = Graphics.classNames.concat([Triangle.className]);\r\n\r\n\tpublic _beforeChanged() {\r\n\t\tsuper._beforeChanged();\r\n\r\n\t\tif (this.isDirty(\"width\") || this.isDirty(\"height\") || this.isPrivateDirty(\"width\") || this.isPrivateDirty(\"height\")) {\r\n\t\t\tthis._clear = true;\r\n\t\t}\r\n\t}\r\n\r\n\tpublic _changed() {\r\n\t\tsuper._changed();\r\n\r\n\t\tif (this._clear && !this.get(\"draw\")) {\r\n\t\t\tthis._draw();\r\n\t\t}\r\n\t}\r\n\r\n\tprotected _draw() {\r\n\t\tconst w = this.width();\r\n\t\tconst h = this.height();\r\n\t\tconst display = this._display;\r\n\t\tdisplay.moveTo(-w / 2, h / 2);\r\n\t\tdisplay.lineTo(0, -h / 2);\r\n\t\tdisplay.lineTo(w / 2, h / 2);\r\n\t\tdisplay.lineTo(-w / 2, h / 2);\r\n\t\tdisplay.closePath();\r\n\r\n\t}\r\n\r\n\tpublic _updateSize() {\r\n\t\tthis.markDirty()\r\n\t\tthis._clear = true;\r\n\t}\r\n}\r\n","import { Scrollbar, IScrollbarPrivate, IScrollbarSettings, IScrollbarEvents } from \"./Scrollbar\";\r\n\r\nexport interface ISliderSettings extends IScrollbarSettings {\r\n}\r\n\r\nexport interface ISliderPrivate extends IScrollbarPrivate {\r\n}\r\n\r\nexport interface ISliderEvents extends IScrollbarEvents {\r\n}\r\n\r\n/**\r\n * A control that allows zooming chart's axes, or other uses requiring range\r\n * selection.\r\n */\r\nexport class Slider extends Scrollbar {\r\n\r\n\tdeclare public _settings: ISliderSettings;\r\n\tdeclare public _privateSettings: ISliderPrivate;\r\n\tdeclare public _events: ISliderEvents;\r\n\r\n\tpublic static className: string = \"Slider\";\r\n\tpublic static classNames: Array<string> = Scrollbar.classNames.concat([Slider.className]);\r\n\r\n\r\n\tprotected _afterNew() {\r\n\t\tthis._addOrientationClass();\r\n\t\tsuper._afterNew();\r\n\r\n\t\tthis.endGrip.setPrivate(\"visible\", false);\r\n\t\tthis.thumb.setPrivate(\"visible\", false);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic updateGrips() {\r\n\t\tsuper.updateGrips();\r\n\t\tconst startGrip = this.startGrip;\r\n\t\tthis.endGrip.setAll({ x: startGrip.x(), y: startGrip.y() });\r\n\t\tthis.setRaw(\"end\", this.get(\"start\"));\r\n\t}\r\n}\r\n","import type { IGradient } from \"../backend/Renderer\";\nimport type { Sprite } from \"../Sprite\";\nimport type { Percent } from \"../../util/Percent\";\n\nimport { Gradient, IGradientSettings, IGradientPrivate } from \"./Gradient\";\nimport { Color } from \"../../util/Color\";\n\nimport * as $array from \"../../util/Array\";\nimport * as $type from \"../../util/Type\";\nimport * as $utils from \"../../util/Utils\";\n\n\nexport interface IRadialGradientSettings extends IGradientSettings {\n\n\t/**\n\t * Gradient radius in pixels or percent (relative to the `target`).\n\t */\n\tradius?: number | Percent;\n\n\t/**\n\t * X position.\n\t */\n\tx?: number | Percent;\n\n\t/**\n\t * Y position.\n\t */\n\ty?: number | Percent;\n\n}\n\nexport interface IRadialGradientPrivate extends IGradientPrivate {\n}\n\n/**\n * Radial gradient.\n *\n * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/gradients/} for more info\n */\nexport class RadialGradient extends Gradient {\n\n\tdeclare public _settings: IRadialGradientSettings;\n\tdeclare public _privateSettings: IRadialGradientPrivate;\n\n\tpublic static className: string = \"RadialGradient\";\n\tpublic static classNames: Array<string> = Gradient.classNames.concat([RadialGradient.className]);\n\n\t/**\n\t * @ignore\n\t */\n\tpublic getFill(target: Sprite): IGradient {\n\t\tconst bounds = this.getBounds(target);\n\n\t\tlet x = 0;\n\t\tlet y = 0;\n\n\t\tlet l = bounds.left || 0;\n\t\tlet r = bounds.right || 0;\n\t\tlet t = bounds.top || 0;\n\t\tlet b = bounds.bottom || 0;\n\n\t\tconst width = r - l;\n\t\tconst height = b - t;\n\n\t\tlet radius = target.get(\"radius\" as any);\n\t\tif ($type.isNumber(radius)) {\n\t\t\tx = 0;\n\t\t\ty = 0;\n\t\t}\n\t\telse {\n\t\t\tradius = Math.min(width, height) / 2;\n\t\t\tx = width / 2;\n\t\t\ty = height / 2;\n\t\t}\n\n\t\tlet ux = this.get(\"x\");\n\t\tlet uy = this.get(\"y\");\n\t\tif (ux != null) {\n\t\t\tx = $utils.relativeToValue(ux, width);\n\t\t}\n\n\t\tif (uy != null) {\n\t\t\ty = $utils.relativeToValue(uy, height);\n\t\t}\n\n\t\tconst gradient = this._root._renderer.createRadialGradient(x, y, 0, x, y, radius);\n\t\tconst stops = this.get(\"stops\")!;\n\t\tif (stops) {\n\t\t\tlet i = 0;\n\t\t\t$array.each(stops, (stop) => {\n\n\t\t\t\tlet offset = stop.offset;\n\n\t\t\t\tif (!$type.isNumber(offset)) {\n\t\t\t\t\toffset = i / (stops.length - 1);\n\t\t\t\t}\n\n\t\t\t\tlet opacity = stop.opacity;\n\n\t\t\t\tif (!$type.isNumber(opacity)) {\n\t\t\t\t\topacity = 1;\n\t\t\t\t}\n\n\t\t\t\tlet color = stop.color;\n\n\t\t\t\tif (color) {\n\n\t\t\t\t\tconst lighten = stop.lighten;\n\t\t\t\t\tif (lighten) {\n\t\t\t\t\t\tcolor = Color.lighten(color, lighten)\n\t\t\t\t\t}\n\n\t\t\t\t\tconst brighten = stop.brighten;\n\t\t\t\t\tif (brighten) {\n\t\t\t\t\t\tcolor = Color.brighten(color, brighten)\n\t\t\t\t\t}\n\n\t\t\t\t\tgradient.addColorStop(offset, 'rgba(' + color.r + ',' + color.g + ',' + color.b + ',' + opacity + ')');\n\t\t\t\t}\n\t\t\t\ti++;\n\t\t\t})\n\t\t}\n\n\t\treturn gradient\n\t}\n}\n","import { Pattern, IPatternSettings, IPatternPrivate } from \"./Pattern\";\n\nimport * as $math from \"../../util/Math\";\n\nexport interface ICirclePatternSettings extends IPatternSettings {\n\n\t/**\n\t * Gap between circles, in pixels.\n\t *\n\t * @default 3\n\t */\n\tgap?: number;\n\n\t/**\n\t * Radius of the circles, in pixels.\n\t *\n\t * @default 3\n\t */\n\tradius?: number;\n\n\t/**\n\t * If set to `true`, will place every second circle, creating checkered\n\t * pattern.\n\t *\n\t * @default false\n\t */\n\tcheckered?: boolean;\n\n\t/**\n\t * Center circles.\n\t *\n\t * @default true\n\t */\n\tcentered?: boolean;\n\n}\n\nexport interface ICirclePatternPrivate extends IPatternPrivate {\n}\n\n/**\n * Circle pattern.\n *\n * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/patterns/} for more info\n */\nexport class CirclePattern extends Pattern {\n\n\tdeclare public _settings: ICirclePatternSettings;\n\tdeclare public _privateSettings: ICirclePatternPrivate;\n\n\tpublic static className: string = \"CirclePattern\";\n\tpublic static classNames: Array<string> = Pattern.classNames.concat([CirclePattern.className]);\n\n\tpublic _beforeChanged() {\n\t\tsuper._beforeChanged();\n\n\t\tif (this.isDirty(\"gap\")) {\n\t\t\tthis._clear = true;\n\t\t}\n\t}\n\n\tprotected _draw() {\n\t\tsuper._draw();\n\n\t\tconst checkered = this.get(\"checkered\", false);\n\t\tconst centered = this.get(\"centered\", true);\n\t\tconst gap = this.get(\"gap\", 0);\n\t\tconst rotation = this.get(\"rotation\", 0);\n\t\tlet w = this.get(\"width\", 100);\n\t\tlet h = this.get(\"height\", 100);\n\t\tlet radius = this.get(\"radius\", 3);\n\n\t\tlet cellW = radius * 2 + gap;\n\t\tlet cellH = radius * 2 + gap;\n\n\t\tlet cols = Math.round(w / cellW);\n\t\tlet rows = Math.round(h / cellH);\n\n\t\tcellW = w / cols;\n\t\tcellH = h / rows;\n\n\t\tif (rotation != 0) {\n\t\t\t// @todo this is probably not right\n\t\t\tthis._display.x = cellW * $math.cos(rotation);\n\t\t\tthis._display.y = cellH * $math.sin(rotation);\n\t\t}\n\n\t\tconst color = this.get(\"color\");\n\t\tconst colorOpacity = this.get(\"colorOpacity\");\n\t\tif (color || colorOpacity) {\n\t\t\tthis._display.beginFill(color, colorOpacity);\n\t\t}\n\n\t\tfor (let r = rotation == 0 ? 0 : -rows * 2; r < rows * 2; r++) {\n\t\t\tfor (let c = rotation == 0 ? 0 : -cols * 2; c < cols * 2; c++) {\n\t\t\t\tif (!checkered || ((r & 1) != 1 && (c & 1) != 1) || ((r & 1) == 1 && (c & 1) == 1)) {\n\t\t\t\t\tlet x = c * cellW;\n\t\t\t\t\tlet y = r * cellH;\n\t\t\t\t\tif (centered) {\n\t\t\t\t\t\tx += cellW + gap / 2;\n\t\t\t\t\t\ty += cellH + gap / 2;\n\t\t\t\t\t}\n\t\t\t\t\tthis._display.drawCircle(x - radius, y - radius, radius);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (checkered) {\n\t\t\tw = w / 2 - gap * 2;\n\t\t\th = h / 2 - gap * 2;\n\t\t}\n\t\telse {\n\t\t\tw -= gap;\n\t\t\th -= gap;\n\t\t}\n\n\t\tif (color || colorOpacity) {\n\t\t\tthis._display.endFill();\n\t\t}\n\n\t}\n}\n","import { Pattern, IPatternSettings, IPatternPrivate } from \"./Pattern\";\nimport * as $type from \"../../util//Type\";\n\nexport interface ILinePatternSettings extends IPatternSettings {\n\n\t/**\n\t * Gap between  lines, in pixels.\n\t *\n\t * @default 6\n\t */\n\tgap?: number;\n\n}\n\nexport interface ILinePatternPrivate extends IPatternPrivate {\n}\n\n/**\n * Line pattern.\n *\n * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/patterns/} for more info\n */\nexport class LinePattern extends Pattern {\n\n\tdeclare public _settings: ILinePatternSettings;\n\tdeclare public _privateSettings: ILinePatternPrivate;\n\n\tpublic static className: string = \"LinePattern\";\n\tpublic static classNames: Array<string> = Pattern.classNames.concat([LinePattern.className]);\n\n\tpublic _beforeChanged() {\n\t\tsuper._beforeChanged();\n\n\t\tif (this.isDirty(\"gap\")) {\n\t\t\tthis._clear = true;\n\t\t}\n\t}\n\n\tprotected _draw() {\n\t\tsuper._draw();\n\n\t\tconst w = this.get(\"width\", 100);\n\t\tconst h = this.get(\"height\", 100);\n\t\tconst gap = this.get(\"gap\", 0);\n\t\tconst strokeWidth = this.get(\"strokeWidth\", 1);\n\n\t\tif (!gap) {\n\t\t\tthis._display.moveTo(0, 0);\n\t\t\tthis._display.lineTo(w, 0);\n\t\t}\n\t\telse {\n\t\t\tlet step = gap + strokeWidth;\n\t\t\tlet count = h / step;\n\n\t\t\tfor (let i = -count; i < count * 2; i++) {\n\t\t\t\tconst y = Math.round(i * step - step / 2) + 0.5;\n\t\t\t\tthis._display.moveTo(-w, y);\n\t\t\t\tthis._display.lineTo(w * 2, y);\n\t\t\t}\n\t\t}\n\n\t\tthis._display.lineStyle(strokeWidth, this.get(\"color\"), this.get(\"colorOpacity\"));\n\n\t\tlet strokeDasharray = this.get(\"strokeDasharray\");\n\t\tif ($type.isNumber(strokeDasharray)) {\n\t\t\tif (strokeDasharray < 0.5) {\n\t\t\t\tstrokeDasharray = [0];\n\t\t\t}\n\t\t\telse {\n\t\t\t\tstrokeDasharray = [strokeDasharray]\n\t\t\t}\n\t\t}\n\t\tthis._display.setLineDash(strokeDasharray as number[]);\n\n\t\tconst strokeDashoffset = this.get(\"strokeDashoffset\");\n\t\tif (strokeDashoffset) {\n\t\t\tthis._display.setLineDashOffset(strokeDashoffset);\n\t\t}\n\n\t\tthis._display.endStroke();\n\t}\n}\n","import { Pattern, IPatternSettings, IPatternPrivate } from \"./Pattern\";\n\nimport * as $math from \"../../util/Math\";\n\nexport interface IRectanglePatternSettings extends IPatternSettings {\n\n\t/**\n\t * Gap between rectangles, in pixels.\n\t *\n\t * @default 6\n\t */\n\tgap?: number;\n\n\t/**\n\t * Maximum width of the rectangle, in pixels.\n\t *\n\t * @default 5\n\t */\n\tmaxWidth?: number;\n\n\t/**\n\t * Maximum height of the rectangle, in pixels.\n\t *\n\t * @default 5\n\t */\n\tmaxHeight?: number;\n\n\t/**\n\t * If set to `true`, will place every second rectangle, creating checkered\n\t * pattern.\n\t *\n\t * @default false\n\t */\n\tcheckered?: boolean;\n\n\t/**\n\t * Center rectangles.\n\t *\n\t * @default true\n\t */\n\tcentered?: boolean;\n\n}\n\nexport interface IRectanglePatternPrivate extends IPatternPrivate {\n}\n\n/**\n * Rectangle pattern.\n *\n * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/patterns/} for more info\n */\nexport class RectanglePattern extends Pattern {\n\tdeclare public _settings: IRectanglePatternSettings;\n\tdeclare public _privateSettings: IRectanglePatternPrivate;\n\n\tpublic static className: string = \"RectanglePattern\";\n\tpublic static classNames: Array<string> = Pattern.classNames.concat([RectanglePattern.className]);\n\n\tpublic _beforeChanged() {\n\t\tsuper._beforeChanged();\n\n\t\tif (this.isDirty(\"gap\")) {\n\t\t\tthis._clear = true;\n\t\t}\n\t}\n\n\tprotected _draw() {\n\t\tsuper._draw();\n\n\t\tconst checkered = this.get(\"checkered\", false);\n\t\tconst centered = this.get(\"centered\", true);\n\t\tconst gap = this.get(\"gap\", 0);\n\t\tconst rotation = this.get(\"rotation\", 0);\n\t\tlet w = this.get(\"width\", 100);\n\t\tlet h = this.get(\"height\", 100);\n\t\tlet rectW = this.get(\"maxWidth\", 5);\n\t\tlet rectH = this.get(\"maxHeight\", 5);\n\n\n\t\tlet cellW = rectW + gap;\n\t\tlet cellH = rectH + gap;\n\n\t\tlet cols = Math.round(w / cellW);\n\t\tlet rows = Math.round(h / cellH);\n\n\t\tcellW = w / cols;\n\t\tcellH = h / rows;\n\n\t\tif (rotation != 0) {\n\t\t\t// @todo this is probably not right\n\t\t\tthis._display.x = cellW / 2 * $math.cos(rotation);\n\t\t\tthis._display.y = -cellH / 2 * $math.sin(rotation);\n\t\t}\n\n\t\tfor (let r = rotation == 0 ? 0 : -rows * 2; r < rows * 2; r++) {\n\t\t\tfor (let c = rotation == 0 ? 0 : -cols * 2; c < cols * 2; c++) {\n\t\t\t\tif (!checkered || ((r & 1) != 1 && (c & 1) != 1) || ((r & 1) == 1 && (c & 1) == 1)) {\n\t\t\t\t\tlet x = c * cellW;\n\t\t\t\t\tlet y = r * cellH;\n\t\t\t\t\tif (centered) {\n\t\t\t\t\t\tx += (cellW - rectW) / 2;\n\t\t\t\t\t\ty += (cellH - rectH) / 2;\n\t\t\t\t\t}\n\t\t\t\t\tthis._display.drawRect(x, y, rectW, rectH);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (checkered) {\n\t\t\tw = w / 2 - gap * 2;\n\t\t\th = h / 2 - gap * 2;\n\t\t}\n\t\telse {\n\t\t\tw -= gap;\n\t\t\th -= gap;\n\t\t}\n\n\t\tconst color = this.get(\"color\");\n\t\tconst colorOpacity = this.get(\"colorOpacity\");\n\t\tif (color || colorOpacity) {\n\t\t\t// this._display.lineStyle(strokeWidth, stroke, colorOpacity);\n\t\t\t// this._display.endStroke();\n\t\t\tthis._display.beginFill(color, colorOpacity);\n\t\t\tthis._display.endFill();\n\t\t}\n\n\t}\n}\n","import { Pattern, IPatternSettings, IPatternPrivate } from \"./Pattern\";\n\n//import * as $math from \"../../util/Math\";\n\nexport interface IPathPatternSettings extends IPatternSettings {\n\n\t// /**\n\t//  * Gap between Paths, in pixels.\n\t//  *\n\t//  * @default 6\n\t//  */\n\t// gap?: number;\n\n\t// /**\n\t//  * Maximum width of the Path, in pixels.\n\t//  *\n\t//  * @default 5\n\t//  */\n\t// maxWidth?: number;\n\n\t// /**\n\t//  * Maximum height of the Path, in pixels.\n\t//  *\n\t//  * @default 5\n\t//  */\n\t// maxHeight?: number;\n\n\t// /**\n\t//  * If set to `true`, will place every second Path, creating checkered\n\t//  * pattern.\n\t//  *\n\t//  * @default false\n\t//  */\n\t// checkered?: boolean;\n\n\t// /**\n\t//  * Center image.\n\t//  *\n\t//  * @default true\n\t//  */\n\t// centered?: boolean;\n\n\t/**\n\t * Use an SVG path as pattern.\n\t *\n\t * @see {@link https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Paths} for more information\n\t */\n\tsvgPath?: string;\n\n}\n\nexport interface IPathPatternPrivate extends IPatternPrivate {\n}\n\n/**\n * A pattern that uses an SVG path.\n *\n * @since 5.2.33\n * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/patterns/} for more info\n */\nexport class PathPattern extends Pattern {\n\tdeclare public _settings: IPathPatternSettings;\n\tdeclare public _privateSettings: IPathPatternPrivate;\n\n\tpublic static className: string = \"PathPattern\";\n\tpublic static classNames: Array<string> = Pattern.classNames.concat([PathPattern.className]);\n\n\tpublic _beforeChanged() {\n\t\tsuper._beforeChanged();\n\n\t\tif (this.isDirty(\"svgPath\")) {\n\t\t\tthis._clear = true;\n\t\t}\n\t}\n\n\tprotected _draw() {\n\t\tsuper._draw();\n\n\t\t// const checkered = this.get(\"checkered\", false);\n\t\t// const centered = this.get(\"centered\", true);\n\t\t// const gap = this.get(\"gap\", 0);\n\t\t// const rotation = this.get(\"rotation\", 0);\n\t\t// let w = this.get(\"width\", 100);\n\t\t// let h = this.get(\"height\", 100);\n\t\t// let rectW = this.get(\"maxWidth\", 5);\n\t\t// let rectH = this.get(\"maxHeight\", 5);\n\n\n\t\t// let cellW = rectW + gap;\n\t\t// let cellH = rectH + gap;\n\n\t\t// let cols = Math.round(w / cellW);\n\t\t// let rows = Math.round(h / cellH);\n\n\t\t// cellW = w / cols;\n\t\t// cellH = h / rows;\n\n\t\t// if (rotation != 0) {\n\t\t// \t// @todo this is probably not right\n\t\t// \tthis._display.x = cellW / 2 * $math.cos(rotation);\n\t\t// \tthis._display.y = -cellH / 2 * $math.sin(rotation);\n\t\t// }\n\n\t\t// for (let r = rotation == 0 ? 0 : -rows * 2; r < rows * 2; r++) {\n\t\t// \tfor (let c = rotation == 0 ? 0 : -cols * 2; c < cols * 2; c++) {\n\t\t// \t\tif (!checkered || ((r & 1) != 1 && (c & 1) != 1) || ((r & 1) == 1 && (c & 1) == 1)) {\n\t\t// \t\t\tlet x = c * cellW;\n\t\t// \t\t\tlet y = r * cellH;\n\t\t// \t\t\tif (centered) {\n\t\t// \t\t\t\tx += (cellW - rectW) / 2;\n\t\t// \t\t\t\ty += (cellH - rectH) / 2;\n\t\t// \t\t\t}\n\t\t// \t\t\tthis._display.drawRect(x, y, rectW, rectH);\n\t\t// \t\t}\n\t\t// \t}\n\t\t// }\n\n\t\t// if (checkered) {\n\t\t// \tw = w / 2 - gap * 2;\n\t\t// \th = h / 2 - gap * 2;\n\t\t// }\n\t\t// else {\n\t\t// \tw -= gap;\n\t\t// \th -= gap;\n\t\t// }\n\n\t\tconst svgPath = this.get(\"svgPath\");\n\t\tif (svgPath != null) {\n\t\t\tthis._display.svgPath(svgPath!);\n\t\t}\n\n\t\tconst color = this.get(\"color\");\n\t\tconst colorOpacity = this.get(\"colorOpacity\");\n\t\tif (color || colorOpacity) {\n\t\t\t// this._display.lineStyle(strokeWidth, stroke, colorOpacity);\n\t\t\t// this._display.endStroke();\n\t\t\tthis._display.beginFill(color, colorOpacity);\n\t\t\tthis._display.endFill();\n\t\t}\n\n\t}\n}\n"],"names":["Picture","_Sprite","_inherits","_super","_createSuper","_this","_classCallCheck","Object","defineProperty","_assertThisInitialized","_root","_renderer","makePicture","undefined","_createClass","key","value","_get","_getPrototypeOf","prototype","call","this","isDirty","width","get","_display","$type","height","clear","shadowColor","shadowBlur","shadowOffsetX","shadowOffsetY","shadowOpacity","_load","_this2","src","eventType","image","Image","crossOrigin","decode","then","_updateSize","catch","_error","events","isEnabled","dispatch","type","target","w","getPrivate","h","r","markDirtyBounds","markDirty","Sprite","classNames","concat","className","Gradient","_Entity","apply","arguments","_target","addColorStop","_offset","_color","gradientTarget","bounds","globalBounds","p0","toLocal","x","left","y","top","p1","right","p2","bottom","p3","Math","min","max","getLocalBounds","Entity","LinearGradient","_Gradient","rotation","getBounds","l","t","b","cos","$math","sin","longer","gradient","createLinearGradient","stops","i","$array","stop","offset","length","opacity","color","lighten","Color","brighten","g","Star","_Graphics","_clear","display","ir","$utils","spikes","step","PI","angle","moveTo","lineTo","closePath","Graphics","HeatLegend","_Container","children","push","Container","new","labelContainer","Label","themeTags","ListTemplate","Template","RoundedRectangle","_new","markers","template","_settings","orientation","set","Tooltip","marker","make","states","create","text","tooltip","getTooltip","p","startValue","c","startColor","endColor","getNumberFormatter","format","interpolate","label","markerContainer","toGlobal","innerHeight","innerWidth","background","show","startLabel","endLabel","setAll","layout","verticalLayout","p100","horizontalLayout","centerY","centerX","stepCount","makeMarker","moveValue","reverse","Triangle","isPrivateDirty","_draw","Slider","_Scrollbar","_addOrientationClass","endGrip","setPrivate","thumb","startGrip","setRaw","Scrollbar","RadialGradient","radius","ux","uy","createRadialGradient","CirclePattern","_Pattern","checkered","centered","gap","cellW","cellH","cols","round","rows","colorOpacity","beginFill","drawCircle","endFill","Pattern","LinePattern","strokeWidth","count","lineStyle","strokeDasharray","setLineDash","strokeDashoffset","setLineDashOffset","endStroke","RectanglePattern","rectW","rectH","drawRect","PathPattern","svgPath"],"sourceRoot":""}