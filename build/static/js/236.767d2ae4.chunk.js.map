{"version":3,"file":"static/js/236.767d2ae4.chunk.js","mappings":"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","sources":["../node_modules/src/.internal/core/render/RadialLabel.ts","../node_modules/src/.internal/core/render/RadialText.ts","../node_modules/src/.internal/core/render/Slice.ts","../node_modules/d3-shape/src/arc.js"],"sourcesContent":["// import * as $object from \"../util/Object\";\nimport { p50, Percent } from \"../util/Percent\";\nimport { Label, ILabelPrivate, ILabelSettings } from \"./Label\";\nimport { RadialText } from \"./RadialText\";\n\nimport * as $math from \"../util/Math\";\nimport * as $utils from \"../util/Utils\";\n\n\nexport interface IRadialLabelSettings extends ILabelSettings {\n\n\t/**\n\t * Pixel value to adjust radius with.\n\t *\n\t * Will add to (or subtract from if negative) whatever value `baseRadius` evaluates\n\t * to.\n\t */\n\tradius?: number;\n\n\t/**\n\t * Radius of the label's position.\n\t *\n\t * Can be either set in absolute pixel value, or percent.\n\t *\n\t * Relative value, depending on the situation, will most often mean its\n\t * position within certain circular object, like a slice: 0% meaning inner\n\t * edge, and 100% - the outer edge.\n\t *\n\t * @default 100%\n\t */\n\tbaseRadius?: number | Percent;\n\n\t/**\n\t * Label anngle in degrees.\n\t *\n\t * In most cases it will be set by the chart/series and does not need to\n\t * be set manually.\n\t */\n\tlabelAngle?: number;\n\n\t/**\n\t * Should the text \"face\" inward or outward from the arc the text is\n\t * following.\n\t *\n\t * `\"auto\"` means that facing will be chosen automatically based on the angle\n\t * to enhance readbility.\n\t *\n\t * Only applies if `type = \"circluar\"`.\n\t * \n\t * @default \"auto\"\n\t */\n\torientation?: \"inward\" | \"outward\" | \"auto\";\n\n\t/**\n\t * Should label be drawn inside (`true`) or outside (`false`) the arc.\n\t *\n\t * @default false\n\t */\n\tinside?: boolean;\n\n\t/**\n\t * Label type.\n\t *\n\t * * `\"regular\"` (default) - normal horizontal label.\n\t * * `\"circular\"` - arched label.\n\t * * `\"radial\"` - label radiating from the center of the arc.\n\t * * `\"aligned\"` - horizontal label aligned with other labels horizontally.\n\t * * `\"adjusted\"` - horizontal label adjusted in postion.\n\t *\n\t * **IMPORTANT!** If the label is used in a [[PieSeries]], its `alignLabels` setting\n\t * (default: `true`) takes precedence over `textType`. If you need to set this\n\t * to anything else than `regular`, make sure you also set `alignLabels: falese` on\n\t * `PieSeries`.\n\t *\n\t * @default \"regular\"\n\t */\n\ttextType?: \"regular\" | \"circular\" | \"radial\" | \"aligned\" | \"adjusted\";\n\n\t/**\n\t * Extra spacing between characters, in pixels.\n\t *\n\t * @default 0\n\t */\n\tkerning?: number;\n\n}\n\nexport interface IRadialLabelPrivate extends ILabelPrivate {\n\n\t/**\n\t * @ignore\n\t */\n\tleft?: boolean;\n\n\t/**\n\t * @ignore\n\t */\n\tradius?: number;\n\n\t/**\n\t * @ignore\n\t */\n\tinnerRadius?: number;\n\n}\n\nexport class RadialLabel extends Label {\n\n\tdeclare public _settings: IRadialLabelSettings;\n\tdeclare public _privateSettings: IRadialLabelPrivate;\n\n\tdeclare protected _text: RadialText;\n\n\tpublic static className: string = \"RadialLabel\";\n\tpublic static classNames: Array<string> = Label.classNames.concat([RadialLabel.className]);\n\n\tprotected _flipped: boolean = false;\n\n\tprotected _afterNew() {\n\t\tthis._textKeys.push(\"textType\", \"kerning\");\n\t\tsuper._afterNew();\n\t}\n\n\n\tpublic _makeText() {\n\t\tthis._text = this.children.push(RadialText.new(this._root, {}));\n\t}\n\n\t/**\n\t * Returns base radius in pixels.\n\t * \n\t * @return Base radius\n\t */\n\tpublic baseRadius(): number {\n\t\tconst radiusPrivate = this.getPrivate(\"radius\", 0);\n\t\tconst innerRadiusPrivate = this.getPrivate(\"innerRadius\", 0);\n\t\tconst baseRadius = this.get(\"baseRadius\", 0);\n\t\treturn innerRadiusPrivate + $utils.relativeToValue(baseRadius, radiusPrivate - innerRadiusPrivate);\n\t}\n\n\t/**\n\t * Returns radius adjustment in pixels.\n\t * \n\t * @return Radius\n\t */\n\tpublic radius(): number {\n\t\tconst inside = this.get(\"inside\", false);\n\t\treturn this.baseRadius() + this.get(\"radius\", 0) * (inside ? -1 : 1);\n\t}\n\n\tpublic _updateChildren() {\n\t\tsuper._updateChildren();\n\n\t\tif (this.isDirty(\"baseRadius\") || this.isPrivateDirty(\"radius\") || this.isPrivateDirty(\"innerRadius\") || this.isDirty(\"labelAngle\") || this.isDirty(\"radius\") || this.isDirty(\"inside\") || this.isDirty(\"orientation\") || this.isDirty(\"textType\")) {\n\n\t\t\tconst textType = this.get(\"textType\", \"adjusted\");\n\n\t\t\tconst inside = this.get(\"inside\", false);\n\n\t\t\tconst orientation = this.get(\"orientation\");\n\t\t\tlet labelAngle = $math.normalizeAngle(this.get(\"labelAngle\", 0));\n\n\t\t\tthis._text.set(\"startAngle\", this.get(\"labelAngle\", 0));\n\t\t\tthis._text.set(\"inside\", inside);\n\n\t\t\tconst sin = $math.sin(labelAngle);\n\t\t\tconst cos = $math.cos(labelAngle);\n\n\t\t\tlet baseRadius = this.baseRadius();\n\t\t\tlet radius = this.radius();\n\n\t\t\tthis._display.angle = 0;\n\n\t\t\tif (textType == \"circular\") {\n\n\t\t\t\tthis.setAll({\n\t\t\t\t\tpaddingTop: 0,\n\t\t\t\t\tpaddingBottom: 0,\n\t\t\t\t\tpaddingLeft: 0,\n\t\t\t\t\tpaddingRight: 0\n\t\t\t\t});\n\n\t\t\t\t// Circular labels are handled and positioned differently\n\n\t\t\t\tthis._text.set(\"orientation\", orientation);\n\t\t\t\tthis._text.set(\"radius\", radius);\n\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif (baseRadius == 0) {\n\t\t\t\t\tlabelAngle = 0;\n\t\t\t\t\tradius = 0;\n\t\t\t\t}\n\n\t\t\t\t// Positioning of radial/regular labels are teh same\n\t\t\t\tlet x = radius * cos;\n\t\t\t\tlet y = radius * sin;\n\n\t\t\t\tif (textType == \"radial\") {\n\n\t\t\t\t\tthis.setRaw(\"x\", x);\n\t\t\t\t\tthis.setRaw(\"y\", y);\n\n\t\t\t\t\tif ((labelAngle < 90) || (labelAngle > 270) || orientation != \"auto\") {\n\t\t\t\t\t\tthis._display.angle = labelAngle;// + 90;\n\t\t\t\t\t\tthis._flipped = false;\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tthis._display.angle = labelAngle + 180;\n\t\t\t\t\t\tthis._flipped = true;\n\t\t\t\t\t}\n\t\t\t\t\tthis._dirty.rotation = false;\n\t\t\t\t}\n\t\t\t\telse if (textType == \"adjusted\") {\n\t\t\t\t\tthis.setRaw(\"centerX\", p50);\n\t\t\t\t\tthis.setRaw(\"centerY\", p50);\n\t\t\t\t\tthis.setRaw(\"x\", x);\n\t\t\t\t\tthis.setRaw(\"y\", y);\n\t\t\t\t}\n\t\t\t\telse if (textType == \"regular\") {\n\t\t\t\t\tthis.setRaw(\"x\", x);\n\t\t\t\t\tthis.setRaw(\"y\", y);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.markDirtyPosition();\n\t\t\tthis.markDirtyBounds();\n\t\t}\n\t}\n\n\n\tpublic _updatePosition() {\n\n\t\tconst textType = this.get(\"textType\", \"regular\");\n\t\tconst inside = this.get(\"inside\", false);\n\n\t\tlet dx = 0;\n\t\tlet dy = 0;\n\t\tlet labelAngle = this.get(\"labelAngle\", 0);\n\t\tlet bounds = this.localBounds();\n\t\tlet w = bounds.right - bounds.left;\n\t\tlet h = bounds.bottom - bounds.top;\n\n\t\tif (textType == \"radial\") {\n\t\t\tif (this._flipped) {\n\t\t\t\tlet centerX = this.get(\"centerX\");\n\t\t\t\tif (centerX instanceof Percent) {\n\t\t\t\t\tw = w * (1 - centerX.value * 2);\n\t\t\t\t}\n\n\t\t\t\tdx = w * $math.cos(labelAngle);\n\t\t\t\tdy = w * $math.sin(labelAngle);\n\t\t\t}\n\t\t}\n\t\telse if (!inside && textType == \"adjusted\") {\n\t\t\tdx = w / 2 * $math.cos(labelAngle);\n\t\t\tdy = h / 2 * $math.sin(labelAngle);\n\t\t}\n\n\n\t\tthis.setRaw(\"dx\", dx);\n\t\tthis.setRaw(\"dy\", dy);\n\n\t\tsuper._updatePosition();\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic get text(): RadialText {\n\t\treturn this._text;\n\t}\n\n}\n","import { Text, ITextSettings, ITextPrivate } from \"./Text\";\nimport * as $math from \"../util/Math\";\nimport type { IRadialText } from \"./backend/Renderer\";\n\n/**\n * @ignore\n */\nexport interface IRadialTextSettings extends ITextSettings {\n\ttextType?: \"regular\" | \"circular\" | \"radial\" | \"aligned\" | \"adjusted\";\n\tradius?: number;\n\tstartAngle?: number;\n\tinside?: boolean;\n\torientation?: \"inward\" | \"outward\" | \"auto\";\n\tkerning?: number;\n}\n\n/**\n * @ignore\n */\nexport interface IRadialTextPrivate extends ITextPrivate {\n}\n\n/**\n * @ignore\n */\nexport class RadialText extends Text {\n\n\tdeclare public _settings: IRadialTextSettings;\n\tdeclare public _privateSettings: IRadialTextPrivate;\n\n\tpublic _display: IRadialText = this._root._renderer.makeRadialText(\"\", this.textStyle);\n\n\tprotected _afterNew() {\n\t\tsuper._afterNew();\n\t}\n\n\tpublic static className: string = \"RadialText\";\n\tpublic static classNames: Array<string> = Text.classNames.concat([RadialText.className]);\n\n\tpublic _beforeChanged() {\n\t\tsuper._beforeChanged();\n\n\t\tthis._display.clear();\n\n\t\tif (this.isDirty(\"textType\")) {\n\t\t\tthis._display.textType = this.get(\"textType\");\n\t\t\tthis.markDirtyBounds();\n\t\t}\n\n\t\tif (this.isDirty(\"radius\")) {\n\t\t\tthis._display.radius = this.get(\"radius\");\n\t\t\tthis.markDirtyBounds();\n\t\t}\n\n\t\tif (this.isDirty(\"startAngle\")) {\n\t\t\tthis._display.startAngle = (this.get(\"startAngle\", 0)! + 90) * $math.RADIANS;\n\t\t\tthis.markDirtyBounds();\n\t\t}\n\n\t\tif (this.isDirty(\"inside\")) {\n\t\t\tthis._display.inside = this.get(\"inside\");\n\t\t\tthis.markDirtyBounds();\n\t\t}\n\n\t\tif (this.isDirty(\"orientation\")) {\n\t\t\tthis._display.orientation = this.get(\"orientation\");\n\t\t\tthis.markDirtyBounds();\n\t\t}\n\n\t\tif (this.isDirty(\"kerning\")) {\n\t\t\tthis._display.kerning = this.get(\"kerning\");\n\t\t\tthis.markDirtyBounds();\n\t\t}\n\t}\n\n}\n","import { Graphics, IGraphicsSettings, IGraphicsPrivate } from \"./Graphics\";\nimport * as $type from \"../util/Type\";\nimport { Percent } from \"../util/Percent\";\nimport type { IPoint } from \"../util/IPoint\";\nimport { arc } from \"d3-shape\";\nimport * as $math from \"../util/Math\";\n\nexport interface ISliceSettings extends IGraphicsSettings {\n\n\t/**\n\t * Radius in pixels.\n\t */\n\tradius?: number;\n\n\t/**\n\t * Slice \"width\" in degrees.\n\t */\n\tarc?: number;\n\n\t/**\n\t * Inner radius of the slice in pixels.\n\t */\n\tinnerRadius?: number;\n\n\t/**\n\t * Start angle in degrees.\n\t */\n\tstartAngle?: number;\n\n\t/**\n\t * Slice corner radius in pixels.\n\t */\n\tcornerRadius?: number;\n\n\t/**\n\t * Slice \"pull out\" radius in pixels.\n\t */\n\tshiftRadius?: number;\n\n\t/**\n\t * Number of pixels to add to whatever slice's `radius` value is. Negative\n\t * numbers can also be used.\n\t */\n\tdRadius?: number;\n\n\t/**\n\t * Number of pixels to add to whatever slice's `innerRadius` value is.\n\t * Negative numbers can also be used.\n\t */\n\tdInnerRadius?: number;\n\n}\n\nexport interface ISlicePrivate extends IGraphicsPrivate {\n}\n\n/**\n * Draws a slice shape.\n *\n * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/graphics/} for more info\n */\nexport class Slice extends Graphics {\n\n\tdeclare public _settings: ISliceSettings;\n\tdeclare public _privateSettings: ISlicePrivate;\n\n\tpublic static className: string = \"Slice\";\n\tpublic static classNames: Array<string> = Graphics.classNames.concat([Slice.className]);\n\n\t/**\n\t * @ignore\n\t */\n\tpublic ix: number = 0;\n\n\t/**\n\t * @ignore\n\t */\n\tpublic iy: number = 0;\n\n\tprotected _generator = arc();\n\n\tpublic _getTooltipPoint(): IPoint {\n\t\tlet tooltipX = this.get(\"tooltipX\");\n\t\tlet tooltipY = this.get(\"tooltipY\");\n\n\t\tlet x = 0;\n\t\tlet y = 0;\n\n\t\tif ($type.isNumber(tooltipX)) {\n\t\t\tx = tooltipX;\n\t\t}\n\n\t\tif ($type.isNumber(tooltipY)) {\n\t\t\ty = tooltipY;\n\t\t}\n\n\t\tlet radius = this.get(\"radius\", 0);\n\t\tlet innerRadius = this.get(\"innerRadius\", 0);\n\n\t\tlet dRadius = this.get(\"dRadius\", 0);\n\t\tlet dInnerRadius = this.get(\"dInnerRadius\", 0);\n\n\t\tradius += dRadius;\n\t\tinnerRadius += dInnerRadius;\n\n\t\tif (innerRadius < 0) {\n\t\t\tinnerRadius = radius + innerRadius;\n\t\t}\n\n\t\tif (tooltipX instanceof Percent) {\n\t\t\tx = this.ix * (innerRadius + (radius - innerRadius) * tooltipX.value)\n\t\t}\n\n\t\tif (tooltipY instanceof Percent) {\n\t\t\ty = this.iy * (innerRadius + (radius - innerRadius) * tooltipY.value)\n\t\t}\n\n\t\tif (this.get(\"arc\") >= 360 && innerRadius == 0) {\n\t\t\tx = 0;\n\t\t\ty = 0;\n\t\t}\n\n\n\t\treturn { x, y };\n\t}\n\tpublic _beforeChanged() {\n\t\tsuper._beforeChanged();\n\n\t\tif (this.isDirty(\"radius\") || this.isDirty(\"arc\") || this.isDirty(\"innerRadius\") || this.isDirty(\"startAngle\") || this.isDirty(\"dRadius\") || this.isDirty(\"dInnerRadius\") || this.isDirty(\"cornerRadius\") || this.isDirty(\"shiftRadius\")) {\n\t\t\tthis._clear = true;\n\t\t}\n\t}\n\n\tpublic _changed() {\n\t\tsuper._changed();\n\n\t\tif (this._clear) {\n\t\t\tlet startAngle = this.get(\"startAngle\", 0);\n\t\t\tlet arc = this.get(\"arc\", 0);\n\t\t\tconst generator = this._generator;\n\n\t\t\tif(arc < 0){\n\t\t\t\tstartAngle = startAngle + arc;\n\t\t\t\tarc = arc * -1;\n\t\t\t}\n\n\t\t\tif(arc > 0.1){ // this fixes bug with full circle when arc is very small\n\t\t\t\tgenerator.cornerRadius(this.get(\"cornerRadius\", 0));\n\t\t\t}\n\t\t\tgenerator.context(this._display as any);\n\n\t\t\tlet radius = this.get(\"radius\", 0);\n\t\t\tlet innerRadius = this.get(\"innerRadius\", 0);\n\n\t\t\tlet dRadius = this.get(\"dRadius\", 0);\n\t\t\tlet dInnerRadius = this.get(\"dInnerRadius\", 0);\n\n\t\t\tradius += dRadius;\n\t\t\tinnerRadius += dInnerRadius;\t\t\t\n\n\t\t\tif (innerRadius < 0) {\n\t\t\t\tinnerRadius = radius + innerRadius;\n\t\t\t}\n\n\t\t\tgenerator({ innerRadius: innerRadius, outerRadius: radius, startAngle: (startAngle + 90) * $math.RADIANS, endAngle: (startAngle + arc + 90) * $math.RADIANS });\n\n\t\t\tlet middleAngle = startAngle + arc / 2;\n\n\t\t\tthis.ix = $math.cos(middleAngle);\n\t\t\tthis.iy = $math.sin(middleAngle);\n\n\t\t\tconst shiftRadius = this.get(\"shiftRadius\", 0);\n\t\t\tthis.setRaw(\"dx\", this.ix * shiftRadius);\n\t\t\tthis.setRaw(\"dy\", this.iy * shiftRadius);\t\t\t\n\t\t\tthis.markDirtyPosition();\n\t\t}\n\t}\n}\n","import constant from \"./constant.js\";\nimport {abs, acos, asin, atan2, cos, epsilon, halfPi, max, min, pi, sin, sqrt, tau} from \"./math.js\";\nimport {withPath} from \"./path.js\";\n\nfunction arcInnerRadius(d) {\n  return d.innerRadius;\n}\n\nfunction arcOuterRadius(d) {\n  return d.outerRadius;\n}\n\nfunction arcStartAngle(d) {\n  return d.startAngle;\n}\n\nfunction arcEndAngle(d) {\n  return d.endAngle;\n}\n\nfunction arcPadAngle(d) {\n  return d && d.padAngle; // Note: optional!\n}\n\nfunction intersect(x0, y0, x1, y1, x2, y2, x3, y3) {\n  var x10 = x1 - x0, y10 = y1 - y0,\n      x32 = x3 - x2, y32 = y3 - y2,\n      t = y32 * x10 - x32 * y10;\n  if (t * t < epsilon) return;\n  t = (x32 * (y0 - y2) - y32 * (x0 - x2)) / t;\n  return [x0 + t * x10, y0 + t * y10];\n}\n\n// Compute perpendicular offset line of length rc.\n// http://mathworld.wolfram.com/Circle-LineIntersection.html\nfunction cornerTangents(x0, y0, x1, y1, r1, rc, cw) {\n  var x01 = x0 - x1,\n      y01 = y0 - y1,\n      lo = (cw ? rc : -rc) / sqrt(x01 * x01 + y01 * y01),\n      ox = lo * y01,\n      oy = -lo * x01,\n      x11 = x0 + ox,\n      y11 = y0 + oy,\n      x10 = x1 + ox,\n      y10 = y1 + oy,\n      x00 = (x11 + x10) / 2,\n      y00 = (y11 + y10) / 2,\n      dx = x10 - x11,\n      dy = y10 - y11,\n      d2 = dx * dx + dy * dy,\n      r = r1 - rc,\n      D = x11 * y10 - x10 * y11,\n      d = (dy < 0 ? -1 : 1) * sqrt(max(0, r * r * d2 - D * D)),\n      cx0 = (D * dy - dx * d) / d2,\n      cy0 = (-D * dx - dy * d) / d2,\n      cx1 = (D * dy + dx * d) / d2,\n      cy1 = (-D * dx + dy * d) / d2,\n      dx0 = cx0 - x00,\n      dy0 = cy0 - y00,\n      dx1 = cx1 - x00,\n      dy1 = cy1 - y00;\n\n  // Pick the closer of the two intersection points.\n  // TODO Is there a faster way to determine which intersection to use?\n  if (dx0 * dx0 + dy0 * dy0 > dx1 * dx1 + dy1 * dy1) cx0 = cx1, cy0 = cy1;\n\n  return {\n    cx: cx0,\n    cy: cy0,\n    x01: -ox,\n    y01: -oy,\n    x11: cx0 * (r1 / r - 1),\n    y11: cy0 * (r1 / r - 1)\n  };\n}\n\nexport default function() {\n  var innerRadius = arcInnerRadius,\n      outerRadius = arcOuterRadius,\n      cornerRadius = constant(0),\n      padRadius = null,\n      startAngle = arcStartAngle,\n      endAngle = arcEndAngle,\n      padAngle = arcPadAngle,\n      context = null,\n      path = withPath(arc);\n\n  function arc() {\n    var buffer,\n        r,\n        r0 = +innerRadius.apply(this, arguments),\n        r1 = +outerRadius.apply(this, arguments),\n        a0 = startAngle.apply(this, arguments) - halfPi,\n        a1 = endAngle.apply(this, arguments) - halfPi,\n        da = abs(a1 - a0),\n        cw = a1 > a0;\n\n    if (!context) context = buffer = path();\n\n    // Ensure that the outer radius is always larger than the inner radius.\n    if (r1 < r0) r = r1, r1 = r0, r0 = r;\n\n    // Is it a point?\n    if (!(r1 > epsilon)) context.moveTo(0, 0);\n\n    // Or is it a circle or annulus?\n    else if (da > tau - epsilon) {\n      context.moveTo(r1 * cos(a0), r1 * sin(a0));\n      context.arc(0, 0, r1, a0, a1, !cw);\n      if (r0 > epsilon) {\n        context.moveTo(r0 * cos(a1), r0 * sin(a1));\n        context.arc(0, 0, r0, a1, a0, cw);\n      }\n    }\n\n    // Or is it a circular or annular sector?\n    else {\n      var a01 = a0,\n          a11 = a1,\n          a00 = a0,\n          a10 = a1,\n          da0 = da,\n          da1 = da,\n          ap = padAngle.apply(this, arguments) / 2,\n          rp = (ap > epsilon) && (padRadius ? +padRadius.apply(this, arguments) : sqrt(r0 * r0 + r1 * r1)),\n          rc = min(abs(r1 - r0) / 2, +cornerRadius.apply(this, arguments)),\n          rc0 = rc,\n          rc1 = rc,\n          t0,\n          t1;\n\n      // Apply padding? Note that since r1 ≥ r0, da1 ≥ da0.\n      if (rp > epsilon) {\n        var p0 = asin(rp / r0 * sin(ap)),\n            p1 = asin(rp / r1 * sin(ap));\n        if ((da0 -= p0 * 2) > epsilon) p0 *= (cw ? 1 : -1), a00 += p0, a10 -= p0;\n        else da0 = 0, a00 = a10 = (a0 + a1) / 2;\n        if ((da1 -= p1 * 2) > epsilon) p1 *= (cw ? 1 : -1), a01 += p1, a11 -= p1;\n        else da1 = 0, a01 = a11 = (a0 + a1) / 2;\n      }\n\n      var x01 = r1 * cos(a01),\n          y01 = r1 * sin(a01),\n          x10 = r0 * cos(a10),\n          y10 = r0 * sin(a10);\n\n      // Apply rounded corners?\n      if (rc > epsilon) {\n        var x11 = r1 * cos(a11),\n            y11 = r1 * sin(a11),\n            x00 = r0 * cos(a00),\n            y00 = r0 * sin(a00),\n            oc;\n\n        // Restrict the corner radius according to the sector angle. If this\n        // intersection fails, it’s probably because the arc is too small, so\n        // disable the corner radius entirely.\n        if (da < pi) {\n          if (oc = intersect(x01, y01, x00, y00, x11, y11, x10, y10)) {\n            var ax = x01 - oc[0],\n                ay = y01 - oc[1],\n                bx = x11 - oc[0],\n                by = y11 - oc[1],\n                kc = 1 / sin(acos((ax * bx + ay * by) / (sqrt(ax * ax + ay * ay) * sqrt(bx * bx + by * by))) / 2),\n                lc = sqrt(oc[0] * oc[0] + oc[1] * oc[1]);\n            rc0 = min(rc, (r0 - lc) / (kc - 1));\n            rc1 = min(rc, (r1 - lc) / (kc + 1));\n          } else {\n            rc0 = rc1 = 0;\n          }\n        }\n      }\n\n      // Is the sector collapsed to a line?\n      if (!(da1 > epsilon)) context.moveTo(x01, y01);\n\n      // Does the sector’s outer ring have rounded corners?\n      else if (rc1 > epsilon) {\n        t0 = cornerTangents(x00, y00, x01, y01, r1, rc1, cw);\n        t1 = cornerTangents(x11, y11, x10, y10, r1, rc1, cw);\n\n        context.moveTo(t0.cx + t0.x01, t0.cy + t0.y01);\n\n        // Have the corners merged?\n        if (rc1 < rc) context.arc(t0.cx, t0.cy, rc1, atan2(t0.y01, t0.x01), atan2(t1.y01, t1.x01), !cw);\n\n        // Otherwise, draw the two corners and the ring.\n        else {\n          context.arc(t0.cx, t0.cy, rc1, atan2(t0.y01, t0.x01), atan2(t0.y11, t0.x11), !cw);\n          context.arc(0, 0, r1, atan2(t0.cy + t0.y11, t0.cx + t0.x11), atan2(t1.cy + t1.y11, t1.cx + t1.x11), !cw);\n          context.arc(t1.cx, t1.cy, rc1, atan2(t1.y11, t1.x11), atan2(t1.y01, t1.x01), !cw);\n        }\n      }\n\n      // Or is the outer ring just a circular arc?\n      else context.moveTo(x01, y01), context.arc(0, 0, r1, a01, a11, !cw);\n\n      // Is there no inner ring, and it’s a circular sector?\n      // Or perhaps it’s an annular sector collapsed due to padding?\n      if (!(r0 > epsilon) || !(da0 > epsilon)) context.lineTo(x10, y10);\n\n      // Does the sector’s inner ring (or point) have rounded corners?\n      else if (rc0 > epsilon) {\n        t0 = cornerTangents(x10, y10, x11, y11, r0, -rc0, cw);\n        t1 = cornerTangents(x01, y01, x00, y00, r0, -rc0, cw);\n\n        context.lineTo(t0.cx + t0.x01, t0.cy + t0.y01);\n\n        // Have the corners merged?\n        if (rc0 < rc) context.arc(t0.cx, t0.cy, rc0, atan2(t0.y01, t0.x01), atan2(t1.y01, t1.x01), !cw);\n\n        // Otherwise, draw the two corners and the ring.\n        else {\n          context.arc(t0.cx, t0.cy, rc0, atan2(t0.y01, t0.x01), atan2(t0.y11, t0.x11), !cw);\n          context.arc(0, 0, r0, atan2(t0.cy + t0.y11, t0.cx + t0.x11), atan2(t1.cy + t1.y11, t1.cx + t1.x11), cw);\n          context.arc(t1.cx, t1.cy, rc0, atan2(t1.y11, t1.x11), atan2(t1.y01, t1.x01), !cw);\n        }\n      }\n\n      // Or is the inner ring just a circular arc?\n      else context.arc(0, 0, r0, a10, a00, cw);\n    }\n\n    context.closePath();\n\n    if (buffer) return context = null, buffer + \"\" || null;\n  }\n\n  arc.centroid = function() {\n    var r = (+innerRadius.apply(this, arguments) + +outerRadius.apply(this, arguments)) / 2,\n        a = (+startAngle.apply(this, arguments) + +endAngle.apply(this, arguments)) / 2 - pi / 2;\n    return [cos(a) * r, sin(a) * r];\n  };\n\n  arc.innerRadius = function(_) {\n    return arguments.length ? (innerRadius = typeof _ === \"function\" ? _ : constant(+_), arc) : innerRadius;\n  };\n\n  arc.outerRadius = function(_) {\n    return arguments.length ? (outerRadius = typeof _ === \"function\" ? _ : constant(+_), arc) : outerRadius;\n  };\n\n  arc.cornerRadius = function(_) {\n    return arguments.length ? (cornerRadius = typeof _ === \"function\" ? _ : constant(+_), arc) : cornerRadius;\n  };\n\n  arc.padRadius = function(_) {\n    return arguments.length ? (padRadius = _ == null ? null : typeof _ === \"function\" ? _ : constant(+_), arc) : padRadius;\n  };\n\n  arc.startAngle = function(_) {\n    return arguments.length ? (startAngle = typeof _ === \"function\" ? _ : constant(+_), arc) : startAngle;\n  };\n\n  arc.endAngle = function(_) {\n    return arguments.length ? (endAngle = typeof _ === \"function\" ? _ : constant(+_), arc) : endAngle;\n  };\n\n  arc.padAngle = function(_) {\n    return arguments.length ? (padAngle = typeof _ === \"function\" ? _ : constant(+_), arc) : padAngle;\n  };\n\n  arc.context = function(_) {\n    return arguments.length ? ((context = _ == null ? null : _), arc) : context;\n  };\n\n  return arc;\n}\n"],"names":["RadialLabel","_Label","_inherits","_super","_createSuper","_this","_classCallCheck","Object","defineProperty","_assertThisInitialized","_createClass","key","value","this","_textKeys","push","_get","_getPrototypeOf","prototype","call","_text","children","RadialText","new","_root","radiusPrivate","getPrivate","innerRadiusPrivate","baseRadius","get","$utils","inside","isDirty","isPrivateDirty","textType","orientation","labelAngle","$math","set","sin","cos","radius","_display","angle","setAll","paddingTop","paddingBottom","paddingLeft","paddingRight","x","y","setRaw","_flipped","_dirty","rotation","p50","markDirtyPosition","markDirtyBounds","dx","dy","bounds","localBounds","w","right","left","h","bottom","top","centerX","Percent","Label","classNames","concat","className","_Text","_renderer","makeRadialText","textStyle","clear","startAngle","kerning","Text","Slice","_Graphics","arc","tooltipX","tooltipY","$type","innerRadius","ix","iy","_clear","generator","_generator","cornerRadius","context","outerRadius","endAngle","middleAngle","shiftRadius","Graphics","arcInnerRadius","d","arcOuterRadius","arcStartAngle","arcEndAngle","arcPadAngle","padAngle","cornerTangents","x0","y0","x1","y1","r1","rc","cw","x01","y01","lo","sqrt","ox","oy","x11","y11","x10","y10","x00","y00","d2","r","D","max","cx0","cy0","cx1","cy1","dx0","dy0","dx1","dy1","cx","cy","constant","padRadius","path","withPath","buffer","r0","apply","arguments","a0","halfPi","a1","da","abs","epsilon","tau","moveTo","t0","t1","a01","a11","a00","a10","da0","da1","ap","rp","min","rc0","rc1","p0","asin","p1","oc","pi","x2","y2","x3","y3","x32","y32","t","intersect","ax","ay","bx","by","kc","acos","lc","atan2","lineTo","closePath","centroid","a","_","length"],"sourceRoot":""}